{{/* vim: set filetype=mustache: */}}

{{/*
Template for creating an Ingress. Expects a list [$, config] as context where "config" is an ingress object (i.e. an
object containing any/all of the keys/values in $.Values.ingress):
*/}}

{{- define "mintel_common.ingress" -}}
{{- $ := index . 0 -}}
{{- $config := index . 1 -}}
{{- $name := coalesce $config.ingressNameOverride (include "mintel_common.fullname" $) -}}
{{- if $config.ingressNameSuffix -}}
{{ $name = printf "%s-%s" $name $config.ingressNameSuffix -}}
{{- end -}}
apiVersion: {{ include "common.capabilities.ingress.apiVersion" $ }}
kind: Ingress
metadata:
  name: {{ $name }}
  namespace: {{ $.Release.Namespace }}
  labels: {{ include "mintel_common.labels" $ | replace (include "mintel_common.fullname" $) $name | nindent 4}}
  annotations:
    {{ include "mintel_common.commonAnnotations" $ }}
    {{- if eq $.Values.global.clusterEnv "local" }}
    ingress.kubernetes.io/ssl-redirect: "false"
    {{- end }}
    {{- if $config.extraAnnotations }}
    {{- toYaml $config.annotations }}
    {{- end }}
    {{- if and $config.alb $config.alb.enabled (ne $.Values.global.clusterEnv "local") }}
    alb.ingress.kubernetes.io/backend-protocol-version: {{ include "mintel_common.ingress.alb.backendProtocolVersion" $config.alb | quote }}
    alb.ingress.kubernetes.io/backend-protocol: {{ include "mintel_common.ingress.alb.backendProtocol" $config.alb | quote }}
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: {{ $config.alb.healthcheck.intervalSeconds | default 15 | quote }}
    alb.ingress.kubernetes.io/healthcheck-path: {{ include "mintel_common.ingress.alb.healthcheck.path" $config.alb | quote }}
    alb.ingress.kubernetes.io/healthcheck-port: {{ include "mintel_common.ingress.alb.healthcheck.port" $ | quote }}
    alb.ingress.kubernetes.io/healthcheck-protocol: {{ include "mintel_common.ingress.alb.healthcheck.protocol" $config.alb | quote }}
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: {{ $config.alb.healthcheck.timeoutSeconds | default 5 | quote }}
    alb.ingress.kubernetes.io/healthy-threshold-count: {{ $config.alb.healthcheck.healthyThresholdCount | default 2 | quote }}
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
    alb.ingress.kubernetes.io/ssl-redirect: "443"
    alb.ingress.kubernetes.io/success-codes: {{ include "mintel_common.ingress.alb.healthcheck.successCodes" $config.alb | quote }}
    {{- $tgAttrs := list }}
    {{- range $k, $v := $config.alb.targetGroupAttributes -}}
      {{- $tgAttrs = append $tgAttrs (printf "%s=%s" (toString $k) (toString $v)) }}
    {{- end }}
    alb.ingress.kubernetes.io/target-group-attributes: {{ join "," $tgAttrs | quote }}
    alb.ingress.kubernetes.io/target-type: "ip"
    alb.ingress.kubernetes.io/unhealthy-threshold-count: {{ $config.alb.healthcheck.unhealthyThresholdCount | default 2 | quote }}
    external-dns.alpha.kubernetes.io/hostname: {{ $config.defaultHost | quote }}
    external-dns.alpha.kubernetes.io/ttl: "60"
    {{- end }}
    {{- if (and $config.blackbox $config.blackbox.enabled) }}
    prometheus.io/probe: "true"
    prometheus.io/probepath: {{ $config.blackbox.probePath }}
    prometheus.io/probescheme: {{ $config.blackbox.probeScheme }}
    {{- end }}
spec:
  ingressClassName: {{ include "mintel_common.ingress.className" $config }}
  rules:
    - host: {{ $config.defaultHost }}
      http:
        paths:
          {{- range $config.pathBasedRouting }}
            {{- include "mintel_common.ingress.ingressPath" . | nindent 10 }}
          {{- end }}
{{- end -}}


{{/* Output ingressClassName */}}
{{- define "mintel_common.ingress.className" -}}
{{- if (and .alb .alb.enabled) -}}
  {{- if eq .alb.scheme "internet-facing" -}}
  alb-public-apps-default
  {{- else if .alb.scheme "internal" -}}
  alb-internal-apps-default
  {{- end -}}
{{- else -}}
haproxy
{{- end -}}
{{- end -}}

{{/* Validate ALB BackendProtocol and default to HTTP */}}
{{- define "mintel_common.ingress.alb.backendProtocol" -}}
{{- if (list "HTTP" "HTTPS") | has .backendProtocol -}}
{{- .backendProtocol -}}
{{- else -}}
HTTP"
{{- end -}}
{{- end -}}

{{/* Validate ALB BackendProtocolVersion and default to HTTP1 */}}
{{- define "mintel_common.ingress.alb.backendProtocolVersion" -}}
{{- if (list "HTTP1" "HTTP2" "GRPC") | has .backendProtocolVersion -}}
{{- .backendProtocolVersion -}}
{{- else -}}
HTTP1
{{- end -}}
{{- end -}}

{{/* Set default ALB healthcheck success-codes */}}
{{- define "mintel_common.ingress.alb.healthcheck.successCodes" -}}
{{- if eq .backendProtocolVersion "GRPC"}}
{{- .healthcheck.successCodes | default "0,12" }}
{{- else }}
{{- .healthcheck.successCodes | default "200" }}
{{- end }}
{{- end }}

{{/* Set default ALB healthcheck path */}}
{{- define "mintel_common.ingress.alb.healthcheck.path" -}}
{{- if eq .backendProtocolVersion "GRPC" }}
{{- .healthcheck.path | default "/grpc.health.v1.Health/Check" }}
{{- else }}
{{- .healthcheck.path | default "/readiness" }}
{{- end }}
{{- end }}

{{/* Set default ALB healthcheck port */}}
{{- define "mintel_common.ingress.alb.healthcheck.port" -}}
{{- if .Values.oauthProxy.enabled }}
{{- .Values.ingress.alb.healthcheck.port | default 4180 }}
{{- else }}
{{- if (and .Values.opensearch.awsEsProxy.ingress .Values.opensearch.awsEsProxy.ingress.enabled) }}
{{- .Values.opensearch.awsEsProxy.ingress.alb.healthcheck.port | default .Values.opensearch.awsEsProxy.port }}
{{- else }}
{{- .Values.ingress.alb.healthcheck.port | default .Values.port }}
{{- end }}
{{- end }}
{{- end }}

{{/* Set default ALB healthcheck protocol */}}
{{- define "mintel_common.ingress.alb.healthcheck.protocol" -}}
{{- if (list "HTTP" "HTTPS") | has .healthcheck.protocol -}}
{{- .healthcheck.protocol -}}
{{- else -}}
HTTP
{{- end -}}
{{- end -}}

{{- define "mintel_common.ingress.ingressPath" -}}
- path: {{ .path }}
  pathType: {{ .pathType }}
  backend:
    service:
      name: {{ .targetService | default (include "mintel_common.fullname" $) }}
      port:
        {{- if (and $.Values.oauthProxy $.Values.oauthProxy.enabled) }}
        number: 4180
        {{- else }}
        {{ $port := .targetPort | default $.Values.port }}
        {{- if not (eq ($port | int) 0) }}
        {{- $port = $port | int }}
        {{- end }}
        {{ if $port | kindIs "int" }}number{{else}}name{{end}}: {{ $port }}
        {{- end }}
{{- end -}}

{{/* Outputs space separated list of endpoints to deny at ingress */}}
{{- define "mintel_common.ingressDenyEndpoints" -}}
{{- $endpoints := list }}
{{- $endpoints = append $endpoints ( .Values.metrics.path | default "/metrics" ) }}
{{- if (ne .Values.ingress.allowLivenessUrl true) }}
{{- $livenessEndpoint := .Values.liveness.path | default "/healthz" }}
{{- if (ne $livenessEndpoint .Values.ingress.blackbox.probePath) }}
{{- $endpoints = append $endpoints $livenessEndpoint }}
{{- end }}
{{- end }}
{{- if (ne .Values.ingress.allowReadinessUrl true) }}
{{- $readinessEndpoint := .Values.readiness.path | default "/readiness" }}
{{- if (ne $readinessEndpoint .Values.ingress.blackbox.probePath) }}
{{- $endpoints = append $endpoints $readinessEndpoint }}
{{- end }}
{{- end }}
{{- $endpoints | sortAlpha | uniq | compact | join " " }}
{{- end -}}

{{/* Create a fully qualified app name, but with ability to override it for ingress */}}
{{- define "mintel_common.ingressName" -}}
{{- if .ingress.ingressNameSuffix }}
{{- printf "%s-%s" (coalesce .ingress.ingressNameOverride (include "mintel_common.fullname" $)) .ingress.ingressNameSuffix -}}
{{- else -}}
{{- coalesce .ingress.ingressNameOverride (include "mintel_common.fullname" $) -}}
{{- end -}}
{{- end -}}

{{/* Ingress labels */}}
{{- define "mintel_common.ingressLabels" -}}
{{ include "mintel_common.labels" . | replace (include "mintel_common.fullname" $) (include "mintel_common.ingressName" .)}}
{{- end -}}
