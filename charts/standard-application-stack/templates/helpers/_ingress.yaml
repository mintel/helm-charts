{{/* vim: set filetype=mustache: */}}

{{/* Output ingressClassName */}}
{{- define "mintel_common.ingress.className" -}}
{{- if (and .Values.ingress.alb .Values.ingress.alb.enabled) -}}
  {{- if eq .Values.ingress.alb.scheme "internet-facing" -}}
  alb-public-apps-default
  {{- else if eq .Values.ingress.alb.scheme "internal" -}}
  alb-internal-apps-default
  {{- end -}}
{{- else -}}
haproxy
{{- end -}}
{{- end -}}

{{/* Validate ALB BackendProtocol and default to HTTP */}}
{{- define "mintel_common.ingress.alb.backendProtocol" -}}
{{- if (list "HTTP" "HTTPS") | has .backendProtocol -}}
{{- .backendProtocol -}}
{{- else -}}
HTTP"
{{- end -}}
{{- end -}}

{{/* Validate ALB BackendProtocolVersion and default to HTTP1 */}}
{{- define "mintel_common.ingress.alb.backendProtocolVersion" -}}
{{- if (list "HTTP1" "HTTP2" "GRPC") | has .backendProtocolVersion -}}
{{- .backendProtocolVersion -}}
{{- else -}}
HTTP1
{{- end -}}
{{- end -}}

{{/* Set default ALB healthcheck success-codes */}}
{{- define "mintel_common.ingress.alb.healthcheck.successCodes" -}}
{{- if eq .backendProtocolVersion "GRPC"}}
{{- .healthcheck.successCodes | default "0,12" }}
{{- else }}
{{- .healthcheck.successCodes | default "200" }}
{{- end }}
{{- end }}

{{/* Set default ALB healthcheck path */}}
{{- define "mintel_common.ingress.alb.healthcheck.path" -}}
{{- if eq .backendProtocolVersion "GRPC" }}
{{- .healthcheck.path | default "/grpc.health.v1.Health/Check" }}
{{- else }}
{{- .healthcheck.path | default "/readiness" }}
{{- end }}
{{- end }}

{{/* Set default ALB healthcheck port */}}
{{- define "mintel_common.ingress.alb.healthcheck.port" -}}
{{- if .Values.oauthProxy.enabled }}
{{- .Values.ingress.alb.healthcheck.port | default 4180 }}
{{- else }}
{{- if (and .Values.opensearch.awsEsProxy.ingress .Values.opensearch.awsEsProxy.ingress.enabled) }}
{{- .Values.opensearch.awsEsProxy.ingress.alb.healthcheck.port | default .Values.opensearch.awsEsProxy.port }}
{{- else }}
{{- .Values.ingress.alb.healthcheck.port | default .Values.port }}
{{- end }}
{{- end }}
{{- end }}

{{/* Set default ALB healthcheck protocol */}}
{{- define "mintel_common.ingress.alb.healthcheck.protocol" -}}
{{- if (list "HTTP" "HTTPS") | has .healthcheck.protocol -}}
{{- .healthcheck.protocol -}}
{{- else -}}
HTTP
{{- end -}}
{{- end -}}

{{- define "mintel_common.ingress.haproxy_annotations" -}}
{{- with .ingress.serverTimeoutSeconds | default .Values.ingress.serverTimeoutSeconds }}
ingress.kubernetes.io/timeout-server: {{ . }}s
{{- end }}
ingress.kubernetes.io/rewrite-target: /
{{- if or (and .Values.metrics .Values.metrics.enabled) .Values.ingress.setXForwardedForHeaders .ingress.setXForwardedForHeaders .Values.ingress.setNoCacheHeaders .ingress.setNoCacheHeaders }}
ingress.kubernetes.io/config-backend: |
{{- end }}
{{- if (and .Values.metrics .Values.metrics.enabled) }}
  acl k8s-monitoring-endpoints path {{ include "mintel_common.ingressDenyEndpoints" . }}
  http-request deny if k8s-monitoring-endpoints
{{- end }}
{{- if (or .Values.ingress.setXForwardedForHeaders .ingress.setXForwardedForHeaders) }}
  acl client-ip-header-exists req.hdr(X-True-Client-IP-BAPqs7Hn0l) -m found
  http-request set-header X-Forwarded-For %[req.hdr_ip(X-True-Client-IP-BAPqs7Hn0l)] if client-ip-header-exists
  http-request set-header X-Forwarded-For %[src] if !client-ip-header-exists
{{- end }}
{{- if (or .Values.ingress.setNoCacheHeaders .ingress.setNoCacheHeaders) }}
  http-response set-header Cache-Control no-cache,no-store,max-age="0"
  http-response set-header Expires -1
  http-response set-header Pragma no-cache
{{- end }}
{{- end }}

{{- define "mintel_common.ingress.alb_annotations" -}}
alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
alb.ingress.kubernetes.io/ssl-redirect: "443"
alb.ingress.kubernetes.io/target-group-attributes: "deregistration_delay.timeout_seconds={{ .alb.deregistrationDelay.timeoutSeconds | default 10 }}"
alb.ingress.kubernetes.io/target-type: "ip"
external-dns.alpha.kubernetes.io/ttl: "60"
external-dns.alpha.kubernetes.io/hostname: {{ .defaultHost }}
alb.ingress.kubernetes.io/backend-protocol: {{ include "mintel_common.ingress.alb.backendProtocol" .alb }}
alb.ingress.kubernetes.io/backend-protocol-version: {{ include "mintel_common.ingress.alb.backendProtocolVersion" .alb }}
alb.ingress.kubernetes.io/success-codes: "{{ include "mintel_common.ingress.alb.healthcheck.successCodes" .alb }}"
alb.ingress.kubernetes.io/healthcheck-path: {{ include "mintel_common.ingress.alb.healthcheck.path" .alb }}
alb.ingress.kubernetes.io/healthcheck-interval-seconds: "{{ .alb.healthcheck.intervalSeconds | default 15 }}"
alb.ingress.kubernetes.io/healthcheck-port: "{{ include "mintel_common.ingress.alb.healthcheck.port" $ }}"
alb.ingress.kubernetes.io/healthcheck-protocol: {{ include "mintel_common.ingress.alb.healthcheck.protocol" .alb }}
alb.ingress.kubernetes.io/healthcheck-timeout-seconds: "{{ .alb.healthcheck.timeoutSeconds | default 5 }}"
alb.ingress.kubernetes.io/healthy-threshold-count: "{{ .alb.healthcheck.healthyThresholdCount | default 2 }}"
alb.ingress.kubernetes.io/unhealthy-threshold-count: "{{ .alb.healthcheck.unhealthyThresholdCount | default 2 }}"
{{- end -}}

{{- define "mintel_common.ingress.ingressPath" -}}
- path: {{ .path | default "/" }}
  pathType: {{ .pathType | default "Prefix" }}
  backend:
    service:
      name: {{ .targetService | default (include "mintel_common.fullname" .) }}
      port:
        {{- if (and .Values.oauthProxy .Values.oauthProxy.enabled) }}
        number: 4180
        {{- else }}
        number: {{ .targetPort | default .Values.port }}
        {{- end }}
{{- end -}}

{{/* Outputs space separated list of endpoints to deny at ingress */}}
{{- define "mintel_common.ingressDenyEndpoints" -}}
{{- $endpoints := list }}
{{- $endpoints = append $endpoints ( .Values.metrics.path | default "/metrics" ) }}
{{- if (ne .Values.ingress.allowLivenessUrl true) }}
{{- $livenessEndpoint := .Values.liveness.path | default "/healthz" }}
{{- if (ne $livenessEndpoint .Values.ingress.blackbox.probePath) }}
{{- $endpoints = append $endpoints $livenessEndpoint }}
{{- end }}
{{- end }}
{{- if (ne .Values.ingress.allowReadinessUrl true) }}
{{- $readinessEndpoint := .Values.readiness.path | default "/readiness" }}
{{- if (ne $readinessEndpoint .Values.ingress.blackbox.probePath) }}
{{- $endpoints = append $endpoints $readinessEndpoint }}
{{- end }}
{{- end }}
{{- $endpoints | sortAlpha | uniq | compact | join " " }}
{{- end -}}

{{/* Create a fully qualified app name, but with ability to override it for ingress */}}
{{- define "mintel_common.ingressName" -}}
{{- if .ingress.ingressNameSuffix }}
{{- printf "%s-%s" (coalesce .ingress.ingressNameOverride $.Values.ingress.ingressNameOverride (include "mintel_common.fullname" .)) .ingress.ingressNameSuffix -}}
{{- else -}}
{{- coalesce .ingress.ingressNameOverride $.Values.ingress.ingressNameOverride (include "mintel_common.fullname" .) -}}
{{- end -}}
{{- end -}}

{{/* Ingress labels */}}
{{- define "mintel_common.ingressLabels" -}}
{{ include "mintel_common.labels" . | replace (include "mintel_common.fullname" .) (include "mintel_common.ingressName" .)}}
{{- end -}}
