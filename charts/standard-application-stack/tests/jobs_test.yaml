suite: Test Jobs
templates:
  - jobs.yaml
release:
  namespace: testNamespace
tests:
  - it: Check default values are correct with minimal configuration
    set:
      global.clusterEnv: testClusterEnv
      global.name: testGlobalName
      image.registry: registry.example.com
      image.repository: test/image/repo
      jobs:
        - name: testJobName
          resources:
            limits:
              cpu: 1000m
              memory: 2Gi
            requests:
              cpu: 1000m
              memory: 2Gi
    asserts:
      - matchSnapshot: {} # Check for regressions and unexpected changes.
      - isKind:
          of: Job
        documentIndex: 0
      - equal:
          path: metadata.namespace
          value: testNamespace
        documentIndex: 0
      - equal:
          path: metadata.name
          value: testGlobalName-testJobName
        documentIndex: 0
      - hasDocuments:
          count: 2
      - equal:
          path: spec.template.spec.containers[0].image
          value: registry.example.com/test/image/repo:v0.1.0
        documentIndex: 0
      - equal:
          path: spec.ttlSecondsAfterFinished
          value: 60
        documentIndex: 0
      # Check that ServiceAccount is created, that no ArgoCD or IRSA annotations are added and that it's referenced
      # correctly in the Job.
      - isKind:
          of: ServiceAccount
        documentIndex: 1
      - isNull:
          path: metadata.annotations["argocd.argoproj.io/hook", "argocd.argoproj.io/hook-delete-policy", "argocd.argoproj.io/sync-wave", "eks.amazonaws.com/role-arn"]
        documentIndex: 1
      - equal:
          path: spec.template.spec.serviceAccountName
          value: testGlobalName-testJobName
        documentIndex: 0
  - it: Check all .job.* values can be set correctly, without overriding from main deployment
    set:
      global.clusterEnv: testClusterEnv
      global.name: testGlobalName
      image.registry: registry.example.com
      image.repository: test/image/repo
      image.tag: someTag
      jobs:
        - name: testJobName
          argo:
            hook: PreSync
            hookDeletePolicy: HookSucceeded
            syncWave: '-1'
          restartPolicy: OnFailure
          ttlSecondsAfterFinished: 120
          image: registry.example.com/another/image/repo:anotherTag
          command:
            - echo
          args:
            - Hello, world.
          env:
            - name: TEST_VAR
              value: testVal
          envFrom:
            - secretRef:
                name: test-secret
          podSecurityContext:
            runAsUser: 1001
          extraInitContainers:
            - name: test-container
              image: someimage
          resources:
            limits:
              cpu: 1000m
              memory: 2Gi
            requests:
              cpu: 1000m
              memory: 2Gi
    documentIndex: 0
    asserts:
      - matchSnapshot: {} # Check for regressions and unexpected changes.
      - isKind:
          of: Job
      - hasDocuments:
          count: 2
      - equal:
          path: metadata.annotations["argocd.argoproj.io/hook"]
          value: PreSync
      - equal:
          path: metadata.annotations["argocd.argoproj.io/hook-delete-policy"]
          value: HookSucceeded
      - equal:
          path: metadata.annotations["argocd.argoproj.io/sync-wave"]
          value: '-1'
      - equal:
          path: spec.template.spec.restartPolicy
          value: OnFailure
      - equal:
          path: spec.template.spec.containers[0].image
          value: registry.example.com/another/image/repo:anotherTag
      - equal:
          path: spec.template.spec.containers[0].command
          value:
            - echo
      - equal:
          path: spec.template.spec.containers[0].args
          value:
            - Hello, world.
      - equal:
          path: spec.template.spec.containers[0].env
          value:
            - name: KUBERNETES_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: APP_ENVIRONMENT
              value: testClusterEnv
            - name: RUNTIME_ENVIRONMENT
              value: kubernetes
            - name: TEST_VAR
              value: testVal
      - equal:
          path: spec.template.spec.containers[0].envFrom
          value:
            - secretRef:
                name: test-secret
      - equal:
          path: spec.template.spec.securityContext.runAsUser
          value: 1001
      - equal:
          path: spec.template.spec.initContainers
          value:
            - name: test-container
              image: someimage
      - equal:
          path: spec.template.spec.containers[0].resources
          value:
            limits:
              cpu: 1000m
              memory: 2Gi
            requests:
              cpu: 1000m
              memory: 2Gi
      - equal:
          path: spec.ttlSecondsAfterFinished
          value: 120
  - it: Check all overrides/additions from main deployment work if enabled
    set:
      global.clusterEnv: testClusterEnv
      global.name: testGlobalName
      image.registry: registry.example.com
      image.repository: test/image/repo
      image.tag: someTag
      env:
        - name: TEST_VAR_1
          value: foo
        - name: TEST_VAR_2
          value: bar
      podSecurityContext:
        runAsUser: 1000
      jobs:
        - name: testJobName
          includeBaseEnv: true
          includeAppSecret: true
          includeBasePodSecurityContext: true
          ttlSecondsAfterFinished: 120
          env:
            - name: TEST_VAR_3
              value: baz
          envFrom:
            - secretRef:
                name: another-secret-ref
          resources:
            limits:
              cpu: 1000m
              memory: 2Gi
            requests:
              cpu: 1000m
              memory: 2Gi
    asserts:
      - matchSnapshot: {} # Check for regressions and unexpected changes.
      - hasDocuments:
          count: 3
      - isKind:
          of: Job
        documentIndex: 0
      - equal:
          path: spec.template.spec.containers[0].image
          value: registry.example.com/test/image/repo:someTag
        documentIndex: 0
      - equal:
          path: spec.template.spec.containers[0].env
          value:
            - name: KUBERNETES_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: APP_ENVIRONMENT
              value: testClusterEnv
            - name: RUNTIME_ENVIRONMENT
              value: kubernetes
            - name: TEST_VAR_1
              value: foo
            - name: TEST_VAR_2
              value: bar
            - name: TEST_VAR_3
              value: baz
        documentIndex: 0
      - equal:
          path: spec.template.spec.securityContext.runAsUser
          value: 1000
        documentIndex: 0
      - equal:
          path: spec.ttlSecondsAfterFinished
          value: 120
        documentIndex: 0
      # Check that additional ExternalSecret gets created and that it's referenced correctly in the Job
      - isKind:
          of: ExternalSecret
        documentIndex: 2
      - equal:
          path: metadata.name
          value: testGlobalName-testJobName-app
        documentIndex: 2
      - equal:
          path: spec.template.spec.containers[0].envFrom
          value:
            - secretRef:
                name: testGlobalName-testJobName-app
            - secretRef:
                name: another-secret-ref
        documentIndex: 0
  - it: checks that rbac is set up correctly for kubelock
    set:
      global.clusterEnv: testClusterEnv
      global.name: testGlobalName
      image.registry: registry.example.com
      image.repository: test/image/repo
      image.tag: someTag
      kubelock:
        enabled: true
      jobs:
        - name: testJobName
    asserts:
      # Test that the Job references the Job's Service Account
      - documentIndex: 0
        isKind:
          of: Job
      - documentIndex: 0
        equal:
          path: spec.template.spec.serviceAccountName
          value: testGlobalName-testJobName
      # Test that a ServiceAccount unique to the Job gets created
      - documentIndex: 1
        isKind:
          of: ServiceAccount
      - documentIndex: 1
        equal:
          path: metadata.name
          value: testGlobalName-testJobName
      # Test that a RoleBinding unique to the Job gets created and that it is binding the Job's ServiceAccount to the
      # main app's Role (which includes the kubelock permissions),
      - documentIndex: 2
        isKind:
          of: RoleBinding
      - documentIndex: 2
        equal:
          path: roleRef.name
          value: testGlobalName
