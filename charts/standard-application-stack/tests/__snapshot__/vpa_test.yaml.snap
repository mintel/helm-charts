Can have per-VerticalPodAutoscaler overrides:
  1: |
    apiVersion: autoscaling.k8s.io/v1
    kind: VerticalPodAutoscaler
    metadata:
      annotations:
        app.mintel.com/placeholder: placeholder
        argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
      labels:
        app.kubernetes.io/component: app
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: example-app
        app.mintel.com/application: example-app
        app.mintel.com/component: example-app
        app.mintel.com/env: qa
        app.mintel.com/region: ${CLUSTER_REGION}
        name: example-app
      name: deployment-example-app
      namespace: test-namespace
    spec:
      targetRef:
        apiVersion: apps/v1
        kind: Deployment
        name: example-app
      updatePolicy:
        minReplicas: 1
        updateMode: "Off"
Can set container policies:
  1: |
    apiVersion: autoscaling.k8s.io/v1
    kind: VerticalPodAutoscaler
    metadata:
      annotations:
        app.mintel.com/placeholder: placeholder
        argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
      labels:
        app.kubernetes.io/component: app
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: example-app
        app.mintel.com/application: example-app
        app.mintel.com/component: example-app
        app.mintel.com/env: qa
        app.mintel.com/region: ${CLUSTER_REGION}
        name: example-app
      name: deployment-example-app
      namespace: test-namespace
    spec:
      resourcePolicy:
        containerPolicies:
          - containerName: '*'
            maxAllowed:
              cpu: "1"
              memory: 1Gi
            minAllowed:
              cpu: 100m
              memory: 100Mi
      targetRef:
        apiVersion: apps/v1
        kind: Deployment
        name: example-app
      updatePolicy:
        minReplicas: 1
        updateMode: "Off"
Creates a VerticalPodAutoscaler for a Deployment:
  1: |
    apiVersion: autoscaling.k8s.io/v1
    kind: VerticalPodAutoscaler
    metadata:
      annotations:
        app.mintel.com/placeholder: placeholder
        argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
      labels:
        app.kubernetes.io/component: app
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: example-app
        app.mintel.com/application: example-app
        app.mintel.com/component: example-app
        app.mintel.com/env: qa
        app.mintel.com/region: ${CLUSTER_REGION}
        name: example-app
      name: deployment-example-app
      namespace: test-namespace
    spec:
      targetRef:
        apiVersion: apps/v1
        kind: Deployment
        name: example-app
      updatePolicy:
        minReplicas: 1
        updateMode: "Off"
Creates a VerticalPodAutoscaler for a StatefulSet:
  1: |
    apiVersion: autoscaling.k8s.io/v1
    kind: VerticalPodAutoscaler
    metadata:
      annotations:
        app.mintel.com/placeholder: placeholder
        argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
      labels:
        app.kubernetes.io/component: app
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: example-app
        app.mintel.com/application: example-app
        app.mintel.com/component: example-app
        app.mintel.com/env: qa
        app.mintel.com/region: ${CLUSTER_REGION}
        name: example-app
      name: statefulset-example-app
      namespace: test-namespace
    spec:
      targetRef:
        apiVersion: apps/v1
        kind: StatefulSet
        name: example-app
      updatePolicy:
        minReplicas: 1
        updateMode: "Off"
Creates a VerticalPodAutoscaler for aws-es-proxy:
  1: |
    apiVersion: autoscaling.k8s.io/v1
    kind: VerticalPodAutoscaler
    metadata:
      annotations:
        app.mintel.com/placeholder: placeholder
        argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
      labels:
        app.kubernetes.io/component: aws-es-proxy
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: example-app-aws-es-proxy
        app.mintel.com/application: example-app
        app.mintel.com/component: example-app
        app.mintel.com/env: qa
        app.mintel.com/region: ${CLUSTER_REGION}
        name: example-app-aws-es-proxy
      name: deployment-example-app-aws-es-proxy
      namespace: test-namespace
    spec:
      targetRef:
        apiVersion: apps/v1
        kind: Deployment
        name: example-app-aws-es-proxy
      updatePolicy:
        minReplicas: 1
        updateMode: "Off"
Creates a VerticalPodAutoscaler for celery:
  1: |
    apiVersion: autoscaling.k8s.io/v1
    kind: VerticalPodAutoscaler
    metadata:
      annotations:
        app.mintel.com/placeholder: placeholder
        argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
      labels:
        app.kubernetes.io/component: celery
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: example-app-celery
        app.mintel.com/application: example-app
        app.mintel.com/component: example-app
        app.mintel.com/env: qa
        app.mintel.com/region: ${CLUSTER_REGION}
        name: example-app-celery
      name: deployment-example-app-celery
      namespace: test-namespace
    spec:
      targetRef:
        apiVersion: apps/v1
        kind: Deployment
        name: example-app-celery
      updatePolicy:
        minReplicas: 1
        updateMode: "Off"
Creates a VerticalPodAutoscaler for celery-beat:
  1: |
    apiVersion: autoscaling.k8s.io/v1
    kind: VerticalPodAutoscaler
    metadata:
      annotations:
        app.mintel.com/placeholder: placeholder
        argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
      labels:
        app.kubernetes.io/component: celery-beat
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: example-app-celery-beat
        app.mintel.com/application: example-app
        app.mintel.com/component: example-app
        app.mintel.com/env: qa
        app.mintel.com/region: ${CLUSTER_REGION}
        name: example-app-celery-beat
      name: deployment-example-app-celery-beat
      namespace: test-namespace
    spec:
      targetRef:
        apiVersion: apps/v1
        kind: Deployment
        name: example-app-celery-beat
      updatePolicy:
        minReplicas: 1
        updateMode: "Off"
Creates a VerticalPodAutoscaler for celery-exporter:
  1: |
    apiVersion: autoscaling.k8s.io/v1
    kind: VerticalPodAutoscaler
    metadata:
      annotations:
        app.mintel.com/placeholder: placeholder
        argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
      labels:
        app.kubernetes.io/component: celery-exporter
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: example-app-celery-exporter
        app.mintel.com/application: example-app
        app.mintel.com/component: example-app
        app.mintel.com/env: qa
        app.mintel.com/region: ${CLUSTER_REGION}
        name: example-app-celery-exporter
      name: deployment-example-app-celery-exporter
      namespace: test-namespace
    spec:
      targetRef:
        apiVersion: apps/v1
        kind: Deployment
        name: example-app-celery-exporter
      updatePolicy:
        minReplicas: 1
        updateMode: "Off"
Creates a VerticalPodAutoscaler for mysqlclient:
  1: |
    apiVersion: autoscaling.k8s.io/v1
    kind: VerticalPodAutoscaler
    metadata:
      annotations:
        app.mintel.com/placeholder: placeholder
        argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
      labels:
        app.kubernetes.io/component: mysqlclient
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: example-app-mysqlclient
        app.mintel.com/application: example-app
        app.mintel.com/component: example-app
        app.mintel.com/env: qa
        app.mintel.com/region: ${CLUSTER_REGION}
        name: example-app-mysqlclient
      name: deployment-example-app-mysqlclient
      namespace: test-namespace
    spec:
      targetRef:
        apiVersion: apps/v1
        kind: Deployment
        name: example-app-mysqlclient
      updatePolicy:
        minReplicas: 1
        updateMode: "Off"
Creates a VerticalPodAutoscaler for mysqldexporter:
  1: |
    apiVersion: autoscaling.k8s.io/v1
    kind: VerticalPodAutoscaler
    metadata:
      annotations:
        app.mintel.com/placeholder: placeholder
        argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
      labels:
        app.kubernetes.io/component: mysqldexporter
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: example-app-mysqldexporter
        app.mintel.com/application: example-app
        app.mintel.com/component: example-app
        app.mintel.com/env: qa
        app.mintel.com/region: ${CLUSTER_REGION}
        name: example-app-mysqldexporter
      name: deployment-example-app-mysqldexporter
      namespace: test-namespace
    spec:
      targetRef:
        apiVersion: apps/v1
        kind: Deployment
        name: example-app-mysqldexporter
      updatePolicy:
        minReplicas: 1
        updateMode: "Off"
Creates a VerticalPodAutoscaler for postgresqlclient:
  1: |
    apiVersion: autoscaling.k8s.io/v1
    kind: VerticalPodAutoscaler
    metadata:
      annotations:
        app.mintel.com/placeholder: placeholder
        argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
      labels:
        app.kubernetes.io/component: postgresqlclient
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: example-app-postgresqlclient
        app.mintel.com/application: example-app
        app.mintel.com/component: example-app
        app.mintel.com/env: qa
        app.mintel.com/region: ${CLUSTER_REGION}
        name: example-app-postgresqlclient
      name: deployment-example-app-postgresqlclient
      namespace: test-namespace
    spec:
      targetRef:
        apiVersion: apps/v1
        kind: Deployment
        name: example-app-postgresqlclient
      updatePolicy:
        minReplicas: 1
        updateMode: "Off"
Creates a VerticalPodAutoscaler for postgresqlexporter:
  1: |
    apiVersion: autoscaling.k8s.io/v1
    kind: VerticalPodAutoscaler
    metadata:
      annotations:
        app.mintel.com/placeholder: placeholder
        argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
      labels:
        app.kubernetes.io/component: postgresqlexporter
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: example-app-postgresqlexporter
        app.mintel.com/application: example-app
        app.mintel.com/component: example-app
        app.mintel.com/env: qa
        app.mintel.com/region: ${CLUSTER_REGION}
        name: example-app-postgresqlexporter
      name: deployment-example-app-postgresqlexporter
      namespace: test-namespace
    spec:
      targetRef:
        apiVersion: apps/v1
        kind: Deployment
        name: example-app-postgresqlexporter
      updatePolicy:
        minReplicas: 1
        updateMode: "Off"
Creates a VerticalPodAutoscaler with autoscaling enabled:
  1: |
    apiVersion: autoscaling.k8s.io/v1
    kind: VerticalPodAutoscaler
    metadata:
      annotations:
        app.mintel.com/placeholder: placeholder
        argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
      labels:
        app.kubernetes.io/component: app
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: example-app
        app.mintel.com/application: example-app
        app.mintel.com/component: example-app
        app.mintel.com/env: qa
        app.mintel.com/region: ${CLUSTER_REGION}
        name: example-app
      name: deployment-example-app
      namespace: test-namespace
    spec:
      targetRef:
        apiVersion: apps/v1
        kind: Deployment
        name: example-app
      updatePolicy:
        minReplicas: 1
        updateMode: Auto
Only creates VerticalPodAutoscaler for CronJobs if cronjobsOnly is true:
  1: |
    apiVersion: autoscaling.k8s.io/v1
    kind: VerticalPodAutoscaler
    metadata:
      annotations:
        app.mintel.com/placeholder: placeholder
        argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
      labels:
        app.kubernetes.io/component: daily
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: example-app-daily
        app.mintel.com/application: example-app
        app.mintel.com/component: example-app
        app.mintel.com/env: qa
        app.mintel.com/region: ${CLUSTER_REGION}
        name: example-app-daily
      name: cronjob-example-app-daily
      namespace: test-namespace
    spec:
      targetRef:
        apiVersion: batch/v1
        kind: CronJob
        name: example-app-daily
      updatePolicy:
        minReplicas: 1
        updateMode: "Off"
