Check DynamoDB envfrom secretRef is present:
  1: |
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        app.mintel.com/placeholder: placeholder
        secret.reloader.stakater.com/reload: test-app-dynamodb
      labels:
        app.kubernetes.io/component: app
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: test-app
        app.mintel.com/env: qa
        app.mintel.com/region: ${CLUSTER_REGION}
        name: test-app
      name: test-app
      namespace: test-namespace
    spec:
      minReadySeconds: 10
      replicas: 2
      selector:
        matchLabels:
          app.kubernetes.io/component: app
          app.kubernetes.io/name: test-app
      strategy:
        rollingUpdate:
          maxSurge: 15%
          maxUnavailable: 10%
        type: RollingUpdate
      template:
        metadata:
          annotations: null
          labels:
            app.kubernetes.io/component: app
            app.kubernetes.io/managed-by: Helm
            app.kubernetes.io/name: test-app
            app.mintel.com/env: qa
            app.mintel.com/region: ${CLUSTER_REGION}
            name: test-app
        spec:
          containers:
            - command:
                - /app/docker-entrypoint.sh
              env:
                - name: KUBERNETES_POD_NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.namespace
                - name: APP_ENVIRONMENT
                  value: qa
                - name: RUNTIME_ENVIRONMENT
                  value: kubernetes
              envFrom:
                - secretRef:
                    name: test-app-dynamodb
              image: registry.gitlab.com/test:v0.1.0
              imagePullPolicy: IfNotPresent
              livenessProbe:
                httpGet:
                  path: /healthz
                  port: http
                  scheme: HTTP
                initialDelaySeconds: 0
                periodSeconds: 10
                timeoutSeconds: 1
              name: main
              ports:
                - containerPort: 8000
                  name: http
              readinessProbe:
                httpGet:
                  path: /readiness
                  port: http
                  scheme: HTTP
                initialDelaySeconds: 0
                periodSeconds: 10
                timeoutSeconds: 1
              resources:
                limits: {}
                requests: {}
              securityContext:
                allowPrivilegeEscalation: false
                apparmor:
                  enabled: false
                  profile: unconfined
                capabilities:
                  drop:
                    - ALL
                runAsNonRoot: true
                runAsUser: 1000
                seccompProfile:
                  type: RuntimeDefault
              startupProbe:
                failureThreshold: 60
                httpGet:
                  path: /healthz
                  port: http
                  scheme: HTTP
                periodSeconds: 5
          imagePullSecrets:
            - name: image-pull-gitlab
            - name: image-pull-docker-hub
          securityContext:
            allowPrivilegeEscalation: false
            apparmor:
              enabled: false
              profile: unconfined
            capabilities:
              drop:
                - ALL
            runAsNonRoot: true
            runAsUser: 1000
            seccompProfile:
              type: RuntimeDefault
          serviceAccountName: test-app
          terminationGracePeriodSeconds: 30
          topologySpreadConstraints:
            - labelSelector:
                matchLabels:
                  app.kubernetes.io/component: app
                  app.kubernetes.io/name: test-app
              maxSkew: 1
              topologyKey: topology.kubernetes.io/zone
              whenUnsatisfiable: DoNotSchedule
Check DynamoDB envfrom secretRef is present for local environment:
  1: |
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        app.mintel.com/placeholder: placeholder
        secret.reloader.stakater.com/reload: test-app-dynamodb
      labels:
        app.kubernetes.io/component: app
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: test-app
        app.mintel.com/env: local
        app.mintel.com/region: local
        name: test-app
      name: test-app
      namespace: test-namespace
    spec:
      minReadySeconds: 10
      replicas: 2
      selector:
        matchLabels:
          app.kubernetes.io/component: app
          app.kubernetes.io/name: test-app
      strategy:
        rollingUpdate:
          maxSurge: 15%
          maxUnavailable: 10%
        type: RollingUpdate
      template:
        metadata:
          annotations: null
          labels:
            app.kubernetes.io/component: app
            app.kubernetes.io/managed-by: Helm
            app.kubernetes.io/name: test-app
            app.mintel.com/env: local
            app.mintel.com/region: local
            name: test-app
        spec:
          containers:
            - command:
                - /app/docker-entrypoint.sh
              env:
                - name: KUBERNETES_POD_NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.namespace
                - name: INIT_DB
                  value: "1"
                - name: SENTRY_DONT_SEND_EVENTS
                  value: "1"
                - name: DEBUG
                  value: "1"
                - name: APP_ENVIRONMENT
                  value: local
                - name: RUNTIME_ENVIRONMENT
                  value: kubernetes
              envFrom:
                - secretRef:
                    name: test-app-dynamodb
              image: k3d-default.localhost:5000/test:v0.1.0
              imagePullPolicy: IfNotPresent
              livenessProbe:
                httpGet:
                  path: /healthz
                  port: http
                  scheme: HTTP
                initialDelaySeconds: 0
                periodSeconds: 10
                timeoutSeconds: 1
              name: main
              ports:
                - containerPort: 8000
                  name: http
              readinessProbe:
                httpGet:
                  path: /readiness
                  port: http
                  scheme: HTTP
                initialDelaySeconds: 0
                periodSeconds: 10
                timeoutSeconds: 1
              resources:
                limits: {}
                requests: {}
              securityContext:
                allowPrivilegeEscalation: false
                apparmor:
                  enabled: false
                  profile: unconfined
                capabilities:
                  drop:
                    - ALL
                runAsNonRoot: true
                runAsUser: 1000
                seccompProfile:
                  type: RuntimeDefault
              startupProbe:
                failureThreshold: 60
                httpGet:
                  path: /healthz
                  port: http
                  scheme: HTTP
                periodSeconds: 5
          imagePullSecrets:
            - name: image-pull-gitlab
            - name: image-pull-docker-hub
          securityContext:
            allowPrivilegeEscalation: false
            apparmor:
              enabled: false
              profile: unconfined
            capabilities:
              drop:
                - ALL
            runAsNonRoot: true
            runAsUser: 1000
            seccompProfile:
              type: RuntimeDefault
          serviceAccountName: test-app
          terminationGracePeriodSeconds: 30
Check DynamoDB secretName Override:
  1: |
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        app.mintel.com/placeholder: placeholder
        secret.reloader.stakater.com/reload: overrideName
      labels:
        app.kubernetes.io/component: app
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: test-app
        app.mintel.com/env: qa
        app.mintel.com/region: ${CLUSTER_REGION}
        name: test-app
      name: test-app
      namespace: test-namespace
    spec:
      minReadySeconds: 10
      replicas: 2
      selector:
        matchLabels:
          app.kubernetes.io/component: app
          app.kubernetes.io/name: test-app
      strategy:
        rollingUpdate:
          maxSurge: 15%
          maxUnavailable: 10%
        type: RollingUpdate
      template:
        metadata:
          annotations: null
          labels:
            app.kubernetes.io/component: app
            app.kubernetes.io/managed-by: Helm
            app.kubernetes.io/name: test-app
            app.mintel.com/env: qa
            app.mintel.com/region: ${CLUSTER_REGION}
            name: test-app
        spec:
          containers:
            - command:
                - /app/docker-entrypoint.sh
              env:
                - name: KUBERNETES_POD_NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.namespace
                - name: APP_ENVIRONMENT
                  value: qa
                - name: RUNTIME_ENVIRONMENT
                  value: kubernetes
              envFrom:
                - secretRef:
                    name: overrideName
              image: registry.gitlab.com/test:v0.1.0
              imagePullPolicy: IfNotPresent
              livenessProbe:
                httpGet:
                  path: /healthz
                  port: http
                  scheme: HTTP
                initialDelaySeconds: 0
                periodSeconds: 10
                timeoutSeconds: 1
              name: main
              ports:
                - containerPort: 8000
                  name: http
              readinessProbe:
                httpGet:
                  path: /readiness
                  port: http
                  scheme: HTTP
                initialDelaySeconds: 0
                periodSeconds: 10
                timeoutSeconds: 1
              resources:
                limits: {}
                requests: {}
              securityContext:
                allowPrivilegeEscalation: false
                apparmor:
                  enabled: false
                  profile: unconfined
                capabilities:
                  drop:
                    - ALL
                runAsNonRoot: true
                runAsUser: 1000
                seccompProfile:
                  type: RuntimeDefault
              startupProbe:
                failureThreshold: 60
                httpGet:
                  path: /healthz
                  port: http
                  scheme: HTTP
                periodSeconds: 5
          imagePullSecrets:
            - name: image-pull-gitlab
            - name: image-pull-docker-hub
          securityContext:
            allowPrivilegeEscalation: false
            apparmor:
              enabled: false
              profile: unconfined
            capabilities:
              drop:
                - ALL
            runAsNonRoot: true
            runAsUser: 1000
            seccompProfile:
              type: RuntimeDefault
          serviceAccountName: test-app
          terminationGracePeriodSeconds: 30
          topologySpreadConstraints:
            - labelSelector:
                matchLabels:
                  app.kubernetes.io/component: app
                  app.kubernetes.io/name: test-app
              maxSkew: 1
              topologyKey: topology.kubernetes.io/zone
              whenUnsatisfiable: DoNotSchedule
