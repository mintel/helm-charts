suite: Test Ingresses
templates:
  - ingress.yaml
release:
  namespace: test-namespace
tests:
  - it: Check HAProxy className set by default
    set:
      global.clusterEnv: qa
      ingress.enabled: true
    asserts:
      - equal:
          path: spec.ingressClassName
          value: haproxy

  - it: Check ALB className set if enabled
    set:
      global.clusterEnv: qa
      ingress.enabled: true
      ingress.alb.enabled: true
    asserts:
      - equal:
          path: spec.ingressClassName
          value: alb-public-apps-default

  - it: Check ALB default health-check port
    set:
      global.clusterEnv: qa
      ingress.enabled: true
      ingress.alb.enabled: true
      port: 8080
    asserts:
      - equal:
          path: metadata.annotations.[alb.ingress.kubernetes.io/healthcheck-port]
          value: "8080"

  - it: Check ALB custom health-check port
    set:
      global.clusterEnv: qa
      ingress.enabled: true
      ingress.alb.enabled: true
      ingress.alb.healthcheck.port: 9999
      port: 8080
    asserts:
      - equal:
          path: metadata.annotations.[alb.ingress.kubernetes.io/healthcheck-port]
          value: "9999"

  - it: Check ALB health-check port with oauthProxy enabled
    set:
      global.clusterEnv: qa
      ingress.enabled: true
      ingress.alb.enabled: true
      oauthProxy.enabled: true
    asserts:
      - equal:
          path: metadata.annotations.[alb.ingress.kubernetes.io/healthcheck-port]
          value: "4180"

  - it: Check ALB gRPC default settings
    set:
      global.clusterEnv: qa
      ingress.enabled: true
      ingress.alb.enabled: true
      ingress.alb.backendProtocolVersion: GRPC
    asserts:
      - equal:
          path: metadata.annotations.[alb.ingress.kubernetes.io/backend-protocol-version]
          value: GRPC
      - equal:
          path: metadata.annotations.[alb.ingress.kubernetes.io/success-codes]
          value: "0,12"
      - equal:
          path: metadata.annotations.[alb.ingress.kubernetes.io/healthcheck-path]
          value: /grpc.health.v1.Health/Check

  - it: Check ALB gRPC custom settings
    set:
      global.clusterEnv: qa
      ingress.enabled: true
      ingress.alb.enabled: true
      ingress.alb.backendProtocolVersion: GRPC
      ingress.alb.healthcheck.successCodes: "0"
      ingress.alb.healthcheck.path: /grpc.health.v1.Readiness/Check
    asserts:
      - equal:
          path: metadata.annotations.[alb.ingress.kubernetes.io/backend-protocol-version]
          value: GRPC
      - equal:
          path: metadata.annotations.[alb.ingress.kubernetes.io/success-codes]
          value: "0"
      - equal:
          path: metadata.annotations.[alb.ingress.kubernetes.io/healthcheck-path]
          value: /grpc.health.v1.Readiness/Check

  - it: Check ALB HTTP2 default settings
    set:
      global.clusterEnv: qa
      ingress.enabled: true
      ingress.alb.enabled: true
      ingress.alb.backendProtocolVersion: HTTP2
    asserts:
      - equal:
          path: metadata.annotations.[alb.ingress.kubernetes.io/backend-protocol-version]
          value: HTTP2
      - equal:
          path: metadata.annotations.[alb.ingress.kubernetes.io/success-codes]
          value: "200"
      - equal:
          path: metadata.annotations.[alb.ingress.kubernetes.io/healthcheck-path]
          value: /readiness

  - it: Check no TLS set if ingressTLSSecrets and specificTlsHostsYaml is empty
    set:
      global.clusterEnv: qa
      global.ingressTLSSecrets: null
      ingress.enabled: true
      ingress.defaultHost: test-app.example.org
      ingress.tls: true
      ingress.specificTlsHostsYaml: null
    asserts:
      - isEmpty:
          path: spec.tls

  - it: Check TLS set if ingressTLSSecrets is not empty
    set:
      global.clusterEnv: qa
      global.ingressTLSSecrets.example_org: star-example-org
      ingress.enabled: true
      ingress.defaultHost: test-app.example.org
      ingress.tls: true
      ingress.specificTlsHostsYaml: null
    asserts:
      - isNotEmpty:
          path: spec.tls

  - it: Check extraHosts
    set:
      global.clusterEnv: qa
      ingress.enabled: true
      ingress.defaultHost: test.default.com
      ingress.extraHosts:
        - name: extra.default.com
    asserts:
      - equal:
          path: spec.rules[0].host
          value: test.default.com
      - equal:
          path: spec.rules[1].host
          value: extra.default.com

  - it: Check extraHosts with oauthProxy.ingressHost (different)
    set:
      global.clusterEnv: qa
      ingress.enabled: true
      ingress.defaultHost: test.default.com
      ingress.extraHosts:
        - name: extra.default.com
      oauthProxy.enabled: true
      oauthProxy.ingressHost: auth.default.com
    asserts:
      - equal:
          path: spec.rules[0].host
          value: test.default.com
      - equal:
          path: spec.rules[1].host
          value: extra.default.com
      - equal:
          path: spec.rules[2].host
          value: auth.default.com

  - it: Check extraHosts with oauthProxy.ingressHost (same as extra host)
    set:
      global.clusterEnv: qa
      ingress.enabled: true
      ingress.defaultHost: test.default.com
      ingress.extraHosts:
        - name: auth.default.com
      oauthProxy.enabled: true
      oauthProxy.ingressHost: auth.default.com
    asserts:
      - equal:
          path: spec.rules[0].host
          value: test.default.com
      - equal:
          path: spec.rules[1].host
          value: auth.default.com

  - it: Check extraHosts with TLS
    set:
      global.clusterEnv: qa
      ingress.enabled: true
      ingress.tls: true
      global.ingressTLSSecrets.default_com: star-default-com
      ingress.defaultHost: test.default.com
      ingress.extraHosts:
        - name: extra.default.com
    asserts:
      - equal:
          path: spec.tls[0].hosts[0]
          value: test.default.com
      - equal:
          path: spec.tls[0].hosts[1]
          value: extra.default.com

  - it: Check extraHosts with TLS and oauthProxy.ingressHost (different)
    set:
      global.clusterEnv: qa
      ingress.enabled: true
      ingress.tls: true
      global.ingressTLSSecrets.default_com: star-default-com
      ingress.defaultHost: test.default.com
      ingress.extraHosts:
        - name: extra.default.com
      oauthProxy.enabled: true
      oauthProxy.ingressHost: auth.default.com
    asserts:
      - equal:
          path: spec.tls[0].hosts[0]
          value: test.default.com
      - equal:
          path: spec.tls[0].hosts[1]
          value: extra.default.com
      - equal:
          path: spec.tls[0].hosts[2]
          value: auth.default.com

  - it: Check extraHosts with TLS and oauthProxy.ingressHost (same as extra host)
    set:
      global.clusterEnv: qa
      ingress.enabled: true
      ingress.tls: true
      global.ingressTLSSecrets.default_com: star-default-com
      ingress.defaultHost: test.default.com
      ingress.extraHosts:
        - name: auth.default.com
      oauthProxy.enabled: true
      oauthProxy.ingressHost: auth.default.com
    asserts:
      - equal:
          path: spec.tls[0].hosts[0]
          value: test.default.com
      - equal:
          path: spec.tls[0].hosts[1]
          value: auth.default.com
