suite: Test Ingresses
templates:
  - ingress.yaml
  - deployment.yaml
release:
  namespace: test-namespace
tests:
  - it: Check ALB className set by default
    template: ingress.yaml
    set:
      global.clusterEnv: qa
      ingress.enabled: true
    asserts:
      - matchSnapshot: {} # Check for regressions and unexpected changes.
      - equal:
          path: spec.ingressClassName
          value: alb-public-apps-default

  - it: Check HAProxy className set if ALB is disabled
    template: ingress.yaml
    set:
      global.clusterEnv: qa
      ingress.enabled: true
      ingress.alb.enabled: false
    asserts:
      - matchSnapshot: {} # Check for regressions and unexpected changes.
      - equal:
          path: spec.ingressClassName
          value: haproxy

  - it: Check ALB default health-check port
    template: ingress.yaml
    set:
      global.clusterEnv: qa
      ingress.enabled: true
      ingress.alb.enabled: true
      port: 8080
    asserts:
      - matchSnapshot: {} # Check for regressions and unexpected changes.
      - equal:
          path: metadata.annotations["alb.ingress.kubernetes.io/healthcheck-port"]
          value: "8080"

  - it: Check ALB custom health-check port
    template: ingress.yaml
    set:
      global.clusterEnv: qa
      ingress.enabled: true
      ingress.alb.enabled: true
      ingress.alb.healthcheck.port: 9999
      port: 8080
    asserts:
      - matchSnapshot: {} # Check for regressions and unexpected changes.
      - equal:
          path: metadata.annotations["alb.ingress.kubernetes.io/healthcheck-port"]
          value: "9999"

  - it: Check ALB health-check port with oauthProxy enabled
    template: ingress.yaml
    set:
      global.clusterEnv: qa
      ingress.enabled: true
      ingress.alb.enabled: true
      oauthProxy.enabled: true
    asserts:
      - matchSnapshot: {} # Check for regressions and unexpected changes.
      - equal:
          path: metadata.annotations["alb.ingress.kubernetes.io/healthcheck-port"]
          value: "4180"

  - it: Check ALB gRPC default settings
    template: ingress.yaml
    set:
      global.clusterEnv: qa
      ingress.enabled: true
      ingress.alb.enabled: true
      ingress.alb.backendProtocolVersion: GRPC
    asserts:
      - matchSnapshot: {} # Check for regressions and unexpected changes.
      - equal:
          path: metadata.annotations["alb.ingress.kubernetes.io/backend-protocol-version"]
          value: GRPC
      - equal:
          path: metadata.annotations["alb.ingress.kubernetes.io/success-codes"]
          value: "0,12"
      - equal:
          path: metadata.annotations["alb.ingress.kubernetes.io/healthcheck-path"]
          value: /grpc.health.v1.Health/Check

  - it: Check ALB gRPC custom settings
    template: ingress.yaml
    set:
      global.clusterEnv: qa
      ingress.enabled: true
      ingress.alb.enabled: true
      ingress.alb.backendProtocolVersion: GRPC
      ingress.alb.healthcheck.successCodes: "0"
      ingress.alb.healthcheck.path: /grpc.health.v1.Readiness/Check
    asserts:
      - matchSnapshot: {} # Check for regressions and unexpected changes.
      - equal:
          path: metadata.annotations["alb.ingress.kubernetes.io/backend-protocol-version"]
          value: GRPC
      - equal:
          path: metadata.annotations["alb.ingress.kubernetes.io/success-codes"]
          value: "0"
      - equal:
          path: metadata.annotations["alb.ingress.kubernetes.io/healthcheck-path"]
          value: /grpc.health.v1.Readiness/Check

  - it: Check ALB HTTP2 default settings
    template: ingress.yaml
    set:
      global.clusterEnv: qa
      ingress.enabled: true
      ingress.alb.enabled: true
      ingress.alb.backendProtocolVersion: HTTP2
    asserts:
      - matchSnapshot: {} # Check for regressions and unexpected changes.
      - equal:
          path: metadata.annotations["alb.ingress.kubernetes.io/backend-protocol-version"]
          value: HTTP2
      - equal:
          path: metadata.annotations["alb.ingress.kubernetes.io/success-codes"]
          value: "200"
      - equal:
          path: metadata.annotations["alb.ingress.kubernetes.io/healthcheck-path"]
          value: /readiness
      - equal:
          path: metadata.annotations["alb.ingress.kubernetes.io/listen-ports"]
          value: '[{"HTTP": 80}, {"HTTPS": 443}]'
      - equal:
          path: metadata.annotations["alb.ingress.kubernetes.io/ssl-redirect"]
          value: "443"

  - it: Check no TLS set if ingressTLSSecrets and specificTlsHostsYaml is empty
    template: ingress.yaml
    set:
      global.clusterEnv: qa
      global.ingressTLSSecrets: null
      ingress.enabled: true
      ingress.defaultHost: test-app.example.org
      ingress.tls: true
      ingress.specificTlsHostsYaml: null
    asserts:
      - matchSnapshot: {} # Check for regressions and unexpected changes.
      - isNull:
          path: spec.tls

  - it: Check TLS set if ingressTLSSecrets is not empty
    template: ingress.yaml
    set:
      global.clusterEnv: qa
      global.ingressTLSSecrets.example_org: star-example-org
      ingress.enabled: true
      ingress.defaultHost: test-app.example.org
      ingress.tls: true
      ingress.specificTlsHostsYaml: null
    asserts:
      - matchSnapshot: {} # Check for regressions and unexpected changes.
      - isNotEmpty:
          path: spec.tls

  - it: Check extraHosts
    template: ingress.yaml
    set:
      global.name: AppyMcAppface
      global.clusterEnv: qa
      ingress.enabled: true
      ingress.defaultHost: test.default.com
      ingress.extraHosts:
        - name: extra.default.com
    asserts:
      - matchSnapshot: {} # Check for regressions and unexpected changes.
      - equal:
          path: spec.rules[0].host
          value: test.default.com
      - equal:
          path: spec.rules[1].host
          value: extra.default.com
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: EXTRA_ALLOWED_HOSTS
            value: 'extra.default.com,test.default.com'
          count: 1
        template: deployment.yaml

  - it: Check EXTRA_ALLOWED_HOSTS env var extraHosts with extraIngresses
    template: deployment.yaml
    set:
      global.clusterEnv: qa
      ingress.enabled: true
      ingress.defaultHost: test.default.com
      ingress.extraHosts:
        - name: extra.default.com
      ingress.extraIngresses:
        - defaultHost: test.extraIngress.com
          extraHosts:
            - name: extra.extraIngress.com
    asserts:
      - matchSnapshot: {} # Check for regressions and unexpected changes.
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: EXTRA_ALLOWED_HOSTS
            value: 'extra.default.com,extra.extraIngress.com,test.default.com,test.extraIngress.com'
          count: 1

  - it: Check extraHosts with oauthProxy.ingressHost (different)
    template: ingress.yaml
    set:
      global.clusterEnv: qa
      ingress.enabled: true
      ingress.defaultHost: test.default.com
      ingress.extraHosts:
        - name: extra.default.com
      oauthProxy.enabled: true
      oauthProxy.ingressHost: auth.default.com
    asserts:
      - matchSnapshot: {} # Check for regressions and unexpected changes.
      - equal:
          path: spec.rules[0].host
          value: test.default.com
      - equal:
          path: spec.rules[1].host
          value: extra.default.com
      - equal:
          path: spec.rules[2].host
          value: auth.default.com
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: EXTRA_ALLOWED_HOSTS
            value: 'auth.default.com,extra.default.com,test.default.com'
          count: 1
        template: deployment.yaml

  - it: Check extraHosts with oauthProxy.ingressHost (same as extra host)
    template: ingress.yaml
    set:
      global.clusterEnv: qa
      ingress.enabled: true
      ingress.defaultHost: test.default.com
      ingress.extraHosts:
        - name: auth.default.com
      oauthProxy.enabled: true
      oauthProxy.ingressHost: auth.default.com
    asserts:
      - matchSnapshot: {} # Check for regressions and unexpected changes.
      - equal:
          path: spec.rules[0].host
          value: test.default.com
      - equal:
          path: spec.rules[1].host
          value: auth.default.com
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: EXTRA_ALLOWED_HOSTS
            value: 'auth.default.com,test.default.com'
          count: 1
        template: deployment.yaml

  - it: Check extraHosts with TLS
    template: ingress.yaml
    set:
      global.clusterEnv: qa
      ingress.enabled: true
      ingress.tls: true
      global.ingressTLSSecrets.default_com: star-default-com
      ingress.defaultHost: test.default.com
      ingress.extraHosts:
        - name: extra.default.com
    asserts:
      - matchSnapshot: {} # Check for regressions and unexpected changes.
      - equal:
          path: spec.tls[0].hosts[0]
          value: test.default.com
      - equal:
          path: spec.tls[0].hosts[1]
          value: extra.default.com
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: EXTRA_ALLOWED_HOSTS
            value: 'extra.default.com,test.default.com'
          count: 1
        template: deployment.yaml

  - it: Check extraHosts with TLS and oauthProxy.ingressHost (different)
    template: ingress.yaml
    set:
      global.clusterEnv: qa
      ingress.enabled: true
      ingress.tls: true
      global.ingressTLSSecrets.default_com: star-default-com
      ingress.defaultHost: test.default.com
      ingress.extraHosts:
        - name: extra.default.com
      oauthProxy.enabled: true
      oauthProxy.ingressHost: auth.default.com
    asserts:
      - matchSnapshot: {} # Check for regressions and unexpected changes.
      - equal:
          path: spec.tls[0].hosts[0]
          value: test.default.com
      - equal:
          path: spec.tls[0].hosts[1]
          value: extra.default.com
      - equal:
          path: spec.tls[0].hosts[2]
          value: auth.default.com
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: EXTRA_ALLOWED_HOSTS
            value: 'auth.default.com,extra.default.com,test.default.com'
          count: 1
        template: deployment.yaml

  - it: Check extraHosts with TLS and oauthProxy.ingressHost (same as extra host)
    template: ingress.yaml
    set:
      global.clusterEnv: qa
      ingress.enabled: true
      ingress.tls: true
      global.ingressTLSSecrets.default_com: star-default-com
      ingress.defaultHost: test.default.com
      ingress.extraHosts:
        - name: auth.default.com
      oauthProxy.enabled: true
      oauthProxy.ingressHost: auth.default.com
    asserts:
      - matchSnapshot: {} # Check for regressions and unexpected changes.
      - equal:
          path: spec.tls[0].hosts[0]
          value: test.default.com
      - equal:
          path: spec.tls[0].hosts[1]
          value: auth.default.com
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: EXTRA_ALLOWED_HOSTS
            value: 'auth.default.com,test.default.com'
          count: 1
        template: deployment.yaml

  - it: Check ingress name override
    template: ingress.yaml
    set:
      global.clusterEnv: qa
      ingress.enabled: true
      ingress.ingressNameOverride: ingress-override
    asserts:
      - matchSnapshot: {} # Check for regressions and unexpected changes.
      - hasDocuments:
          count: 1
      - equal:
          path: metadata.name
          value: ingress-override
      - equal:
          path: metadata.labels.name
          value: ingress-override
      - equal:
          path: metadata.labels["app.kubernetes.io/name"]
          value: ingress-override

  - it: Check ingress name suffix setting
    template: ingress.yaml
    set:
      global.clusterEnv: qa
      ingress.enabled: true
      ingress.ingressNameSuffix: suffix
    asserts:
      - matchSnapshot: {} # Check for regressions and unexpected changes.
      - hasDocuments:
          count: 1
      - equal:
          path: metadata.name
          value: example-app-suffix
      - equal:
          path: metadata.labels.name
          value: example-app-suffix
      - equal:
          path: metadata.labels["app.kubernetes.io/name"]
          value: example-app-suffix

  - it: Default ingress with path based routing
    template: ingress.yaml
    set:
      global.clusterEnv: qa
      ingress.enabled: true
      ingress.pathBasedRouting:
        - targetService: service1
          targetPort: 1234
          path: /i01
        - targetService: service2
          targetPort: 5678
          path: /i02
    asserts:
      - matchSnapshot: {} # Check for regressions and unexpected changes.
      - hasDocuments:
          count: 1
      - equal:
          path: spec.rules[0].http.paths[0].path
          value: /i01
      - equal:
          path: spec.rules[0].http.paths[0].backend.service.name
          value: service1
      - equal:
          path: spec.rules[0].http.paths[0].backend.service.port.number
          value: 1234
      - equal:
          path: spec.rules[0].http.paths[1].path
          value: /i02
      - equal:
          path: spec.rules[0].http.paths[1].backend.service.name
          value: service2
      - equal:
          path: spec.rules[0].http.paths[1].backend.service.port.number
          value: 5678

  - it: allows extraIngresses to override default values
    template: ingress.yaml
    set:
      global.clusterEnv: qa
      ingress.enabled: true
      ingress.ingressNameOverride: image-service
      ingress.ingressNameSuffix: media
      ingress.defaultHost: media.mintel.com
      ingress.extraIngresses:
        - ingressNameSuffix: ops-media
          defaultHost: ops-media.mintel.com
          pathBasedRouting:
            - targetService: mock-service
              targetPort: mock-port
              path: /mock-path

    asserts:
      - matchSnapshot: {} # Check for regressions and unexpected changes.
      - hasDocuments:
          count: 2
      - equal:
          path: metadata.name
          value: image-service-media
        documentIndex: 0
      - equal:
          path: spec.rules[0].host
          value: media.mintel.com
        documentIndex: 0
      - equal:
          path: metadata.name
          value: image-service-ops-media
        documentIndex: 1
      - equal:
          path: spec.rules[0].host
          value: ops-media.mintel.com
        documentIndex: 1
      - equal:
          path: spec.rules[0].http.paths[0].backend.service.name
          value: mock-service
        documentIndex: 1
      - equal:
          path: spec.rules[0].http.paths[0].backend.service.port.name
          value: mock-port
        documentIndex: 1
      - equal:
          path: spec.rules[0].http.paths[0].path
          value: /mock-path
        documentIndex: 1
