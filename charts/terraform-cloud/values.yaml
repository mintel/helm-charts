# Default values for terraform-cloud.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

global:
  # -- Name of the application
  name: "example-app"
  # -- Team which "owns" the application
  owner: ""
  # -- Top level application each deployment is a part of
  partOf: ""
  # -- Additional labels to apply to all resources
  clusterDomain: "127.0.0.1.nip.io"
  # -- Environment (local, dev, qa, prod)
  clusterEnv: "local"
  # -- Kubernetes cluster name
  clusterName: ""
  # -- Kubernetes cluster region
  clusterRegion: ""
  terraform:
    # -- Name of our Terraform Cloud org
    organization: Mintel
    # -- Where secrets are mounted inside the Terraform Operator container
    secretsMountPath: /tmp/secrets
    # -- Global Terraform version for all modules
    terraformVersion: 1.0.7
    # -- Set to true as part of tf cloud migrations. When true, it stops standard-application-stack from creating AWS
    # related external secrets and passes that responsibility to the terraform-cloud chart
    externalSecrets: true
    # -- Set to true as part of tf cloud migrations. When true, standard-application-stack sets the service account
    # eks annotation to match the new IAM roles created by the app-iam module
    irsa: true
    # -- ID of the Terraform Cloud Agent Pool to use for the run. Passed in from cluster-env-jsonnet
    agentPoolID: ""

irsa:
  # -- Set to true to explicitly instantiate this module if there's need to access resources created elsewhere
  enabled: false
  terraform:
    ### Set Terraform version for this module to overwrite global.TerraformVersion
    # terraformVersion:
    ### Set override to stop IRSA from ending in global.name
    # nameOverride:
    # @default -- -
    module:
      # -- Registry path of the Terraform module used to create the resource
      # (https://app.terraform.io/app/Mintel/registry/modules/private/Mintel/app-iam/aws)
      source: app.terraform.io/Mintel/app-iam/aws
      # -- Module version
      version: "2.0.0"
    # -- Vars to be applied to all instances defined below
    # @default -- See below
    vars: {}
      ### Set to override the generated workspace name for example if the generated name is above the char limit
      # workspaceNameOverride: string
      ### Comma separated list of tags to add to workspace. Set to override the defaults which are:
      ### the environment, the AWS region, the cluster name, the namespace, the resource type and the owner
      # workspaceTags: string
      ### Boolean which when set to true disables destroy runs on the workspace and vice-versa. It serves as a form of
      ### deletion protection. It defaults to false in prod and logs and true elsewhere
      # workspaceAllowDestroy: bool
      ### Used to map to the Terraform Cloud team(s) to give access to the workspace. Defaults to the global.owner value
      # workspaceOwner: string

dynamodb:
  # -- Set to true to create a DynamoDB instance
  enabled: false
  # -- Set to true to create an AWS secret manager external secret with outputs
  outputSecret: true
  terraform:
    ### Set Terraform version for this module to overwrite global.TerraformVersion
    # terraformVersion:
    module:
      # -- Registry path of the Terraform module used to create the resource
      # (https://app.terraform.io/app/Mintel/registry/modules/private/Mintel/dynamodb/aws)
      source: app.terraform.io/Mintel/dynamodb/aws
      # -- Module version
      version: "1.0.0"
    # -- Vars to be applied to all instances defined below
    defaultVars: {}
      ### Set to override the generated workspace name for example if the generated name is above the char limit
      # workspaceNameOverride: string
      ### Comma separated list of tags to add to workspace. Set to override the defaults which are:
      ### the environment, the AWS region, the cluster name, the namespace, the resource type and the owner
      # workspaceTags: string
      ### Boolean which when set to true disables destroy runs on the workspace and vice-versa. It serves as a form of
      ### deletion protection. It defaults to false in prod and logs and true elsewhere
      # workspaceAllowDestroy: bool
      ### Used to map to the Terraform Cloud team(s) to give access to the workspace. Defaults to the global.owner value
      # workspaceOwner: string
      ### Use to map keys from AWS secret manager secrets to new key names. Map values should be in the form <new key>:<module secret key>
      # outputSecretMap: {}
      ### Automatically set to true in prod and qa but false in non-prod. Override this only if you know what you're doing.
      # point_in_time_recovery_enabled: bool
    # -- A map of instance names => variable key/value pairs to be sent to the terraform module. The values in
    # `defaultVars` will be applied to every instance if not explicitly defined here.
    instances: {}
    # Example:
    # instances:
    #   "my-instance-1":
    #     db_name: "my_db"
    #

sqs:
  # -- Set to true to create an SQS resource
  enabled: false
  # -- Set to true to create an AWS secret manager external secret with outputs
  outputSecret: true
  terraform:
    ### Set Terraform version for this module to overwrite global.TerraformVersion
    # terraformVersion:
    module:
      # -- Registry path of the Terraform module used to create the resource
      # (https://app.terraform.io/app/Mintel/registry/modules/private/Mintel/sqs/aws)
      source: app.terraform.io/Mintel/sqs/aws
      # -- Module version
      version: "1.0.0"
    # -- Vars to be applied to all instances defined below
    defaultVars: {}
      ### Set to override the generated workspace name for example if the generated name is above the char limit
      # workspaceNameOverride: string
      ### Comma separated list of tags to add to workspace. Set to override the defaults which are:
      ### the environment, the AWS region, the cluster name, the namespace, the resource type and the owner
      # workspaceTags: string
      ### Boolean which when set to true disables destroy runs on the workspace and vice-versa. It serves as a form of
      ### deletion protection. It defaults to false in prod and logs and true elsewhere
      # workspaceAllowDestroy: bool
      ### Used to map to the Terraform Cloud team(s) to give access to the workspace. Defaults to the global.owner value
      # workspaceOwner: string
      ### Use to map keys from AWS secret manager secrets to new key names. Map values should be in the form <new key>:<module secret key>
      # outputSecretMap: {}
    # -- A map of instance names => variable key/value pairs to be sent to the terraform module. The values in
    # `defaultVars` will be applied to every instance if not explicitly defined here.
    instances: {}

sns:
  # -- Set to true to create an SNS resource
  enabled: false
  # -- Set to true to create an AWS secret manager external secret with outputs
  outputSecret: true
  terraform:
    ### Set Terraform version for this module to overwrite global.TerraformVersion
    # terraformVersion:
    module:
      # -- Registry path of the Terraform module used to create the resource
      # (https://app.terraform.io/app/Mintel/registry/modules/private/Mintel/sns/aws)
      source: app.terraform.io/Mintel/sns/aws
      # -- Module version
      version: "1.0.0"
    # -- Vars to be applied to all instances defined below
    defaultVars: {}
      ### Set to override the generated workspace name for example if the generated name is above the char limit
      # workspaceNameOverride: string
      ### Comma separated list of tags to add to workspace. Set to override the defaults which are:
      ### the environment, the AWS region, the cluster name, the namespace, the resource type and the owner
      # workspaceTags: string
      ### Boolean which when set to true disables destroy runs on the workspace and vice-versa. It serves as a form of
      ### deletion protection. It defaults to false in prod and logs and true elsewhere
      # workspaceAllowDestroy: bool
      ### Used to map to the Terraform Cloud team(s) to give access to the workspace. Defaults to the global.owner value
      # workspaceOwner: string
      ### Use to map keys from AWS secret manager secrets to new key names. Map values should be in the form <new key>:<module secret key>
      # outputSecretMap: {}
    # -- A map of instance names => variable key/value pairs to be sent to the terraform module. The values in
    # `defaultVars` will be applied to every instance if not explicitly defined here.
    instances: {}

staticWebsite:
  # -- Set to true to create static website (a public bucket and associated resources)
  enabled: false
  # -- Set to true to create an AWS secret manager external secret with outputs
  outputSecret: true
  terraform:
    ### Set Terraform version for this module to overwrite global.TerraformVersion
    # terraformVersion:
    module:
      # -- Registry path of the Terraform module used to create the resource
      # (https://app.terraform.io/app/Mintel/registry/modules/private/Mintel/public-static-website/aws)
      source: app.terraform.io/Mintel/public-static-website/aws
      # -- Module version
      version: "1.0.0"
    # -- Vars to be applied to all instances defined below
    defaultVars: {}
      ### Set to override the generated workspace name for example if the generated name is above the char limit
      # workspaceNameOverride: string
      ### Comma separated list of tags to add to workspace. Set to override the defaults which are:
      ### the environment, the AWS region, the cluster name, the namespace, the resource type and the owner
      # workspaceTags: string
      ### Boolean which when set to true disables destroy runs on the workspace and vice-versa. It serves as a form of
      ### deletion protection. It defaults to false in prod and logs and true elsewhere
      # workspaceAllowDestroy: bool
      ### Used to map to the Terraform Cloud team(s) to give access to the workspace. Defaults to the global.owner value
      # workspaceOwner: string
      ### Use to map keys from AWS secret manager secrets to new key names. Map values should be in the form <new key>:<module secret key>
      # outputSecretMap: {}
    # -- A map of instance names => variable key/value pairs to be sent to the terraform module. The values in
    # `defaultVars` will be applied to every instance if not explicitly defined here.
    instances: {}

mariadb:
  # -- Set to true to create a MariaDB RDS instance
  enabled: false
  # -- Set to true to create an AWS secret manager external secret with outputs
  outputSecret: true
  terraform:
    ### Set Terraform version for this module to overwrite global.TerraformVersion
    # terraformVersion:
    module:
      # -- Registry path of the Terraform module used to create the resource
      # (https://app.terraform.io/app/Mintel/registry/modules/private/Mintel/rds/aws)
      source: app.terraform.io/Mintel/rds/aws
      # -- Module version
      version: "1.0.2"
    # -- Vars to be applied to all instances defined below
    # @default -- See below
    defaultVars:
      # -- Database engine to use (should always be "mariadb")
      engine: "mariadb"
      # -- MariaDB version
      engine_version: "10.5"
      # -- MariaDB port
      port: 3306
      ### Set to override the generated workspace name for example if the generated name is above the char limit
      # workspaceNameOverride: string
      ### Comma separated list of tags to add to workspace. Set to override the defaults which are:
      ### the environment, the AWS region, the cluster name, the namespace, the resource type and the owner
      # workspaceTags: string
      ### Boolean which when set to true disables destroy runs on the workspace and vice-versa. It serves as a form of
      ### deletion protection. It defaults to false in prod and logs and true elsewhere
      # workspaceAllowDestroy: bool
      ### Used to map to the Terraform Cloud team(s) to give access to the workspace. Defaults to the global.owner value
      # workspaceOwner: string
      ### Use to map keys from AWS secret manager secrets to new key names. Map values should be in the form <new key>:<module secret key>
      # outputSecretMap: {}
      ### Automatically set to true if prod and false if non-prod. Override this only if you know what you're doing.
      # multi_az: bool
      ### Automatically set to 14 in prod, 7 in qa and 0 in dev. Override this only if you know what you're doing.
      # backup_retention_period: number
      ### Automatically set to true in prod and qa but false in dev. Override this only if you know what you're doing.
      # enable_deletion_protection: bool
    # -- A map of instance names => variable key/value pairs to be sent to the terraform module. The values in
    # `defaultVars` will be applied to every instance if not explicitly defined here.
    instances: {}

auroraMySql:
  # -- Set to true to create a MySQL Aurora RDS cluster
  enabled: false
  # -- Set to true to create an AWS secret manager external secret with outputs
  outputSecret: true
  terraform:
    ### Set Terraform version for this module to overwrite global.TerraformVersion
    # terraformVersion:
    module:
      # -- Registry path of the Terraform module used to create the resource
      # (https://app.terraform.io/app/Mintel/registry/modules/private/Mintel/rds-aurora/aws)
      source: app.terraform.io/Mintel/rds-aurora/aws
      # -- Module version
      version: "0.0.3"
    # -- Vars to be applied to all instances defined below
    # @default -- See below
    defaultVars:
      # -- Database engine to use (should always be "aurora-mysql")
      engine: "aurora-mysql"
      # -- Aurora MySQL version
      engine_version: "5.7.mysql_aurora.2.10.2"
      # -- Aurora MySQL port
      port: 3306
      ### Set to override the generated workspace name for example if the generated name is above the char limit
      # workspaceNameOverride: string
      ### Comma separated list of tags to add to workspace. Set to override the defaults which are:
      ### the environment, the AWS region, the cluster name, the namespace, the resource type and the owner
      # workspaceTags: string
      ### Boolean which when set to true disables destroy runs on the workspace and vice-versa. It serves as a form of
      ### deletion protection. It defaults to false in prod and logs and true elsewhere
      # workspaceAllowDestroy: bool
      ### Used to map to the Terraform Cloud team(s) to give access to the workspace. Defaults to the global.owner value
      # workspaceOwner: string
      ### Use to map keys from AWS secret manager secrets to new key names. Map values should be in the form <new key>:<module secret key>
      # outputSecretMap: {}
      ### Automatically set to true if prod and false if non-prod. Override this only if you know what you're doing.
      # multi_az: bool
      ### Automatically set to 14 in prod, 7 in qa and 0 in dev. Override this only if you know what you're doing.
      # backup_retention_period: number
      ### Automatically set to true in prod and qa but false in dev. Override this only if you know what you're doing.
      # enable_deletion_protection: bool
    # -- A map of instance names => variable key/value pairs to be sent to the terraform module. The values in
    # `defaultVars` will be applied to every instance if not explicitly defined here.
    instances: {}

memcached:
  # -- Set to true to create a memcached Elasticache resource
  enabled: false
  # -- Set to true to create an AWS secret manager external secret with outputs
  outputSecret: true
  terraform:
    ### Set Terraform version for this module to overwrite global.TerraformVersion
    # terraformVersion:
    module:
      # -- Registry path of the Terraform module used to create the resource
      # (https://app.terraform.io/app/Mintel/registry/modules/private/Mintel/memcached/aws)
      source: app.terraform.io/Mintel/memcached/aws
      # -- Module version
      version: "1.0.1"
    # -- Vars to be applied to all instances defined below
    # @default -- See below
    defaultVars:
      # -- EC2 instance type to use (https://aws.amazon.com/elasticache/pricing)
      instance_type: cache.t4g.micro
      # -- Number of nodes to create in the cluster
      num_cache_nodes: 1
      ### Set to override the generated workspace name for example if the generated name is above the char limit
      # workspaceNameOverride: string
        ### Comma separated list of tags to add to workspace. Set to override the defaults which are:
        ### the environment, the AWS region, the cluster name, the namespace, the resource type and the owner
        # workspaceTags: string
        ### Boolean which when set to true allows destroy runs on the workspace and vice-versa. It serves as a form of
        ### deletion protection. It defaults to false in prod and logs
        # workspaceAllowDestroy: bool
        ### Used to map to the Terraform Cloud team(s) to give access to the workspace. Defaults to the global.owner value
        # workspaceOwner: string
        ### Use to map keys from AWS secret manager secrets to new key names. Map values should be in the form <new key>:<module secret key>
        # outputSecretMap: {}
    # -- A map of instance names => variable key/value pairs to be sent to the terraform module. The values in
    # `defaultVars` will be applied to every instance if not explicitly defined here.
    instances: {}

opensearch:
  # -- Set to true to create an Opensearch cluster
  enabled: false
  # -- Set to true to create an AWS secret manager external secret with outputs
  outputSecret: true
  terraform:
    ### Set Terraform version for this module to overwrite global.TerraformVersion
    # terraformVersion:
    module:
      # -- Registry path of the Terraform module used to create the resource
      # (https://app.terraform.io/app/Mintel/registry/modules/private/Mintel/opensearch/aws)
      source: app.terraform.io/Mintel/opensearch/aws
      # -- Module version
      version: "1.1.0"
    # -- Vars to be applied to all instances defined below
    defaultVars:
      ### Set to override the generated workspace name for example if the generated name is above the char limit
      # workspaceNameOverride: string
      ### Comma separated list of tags to add to workspace. Set to override the defaults which are:
      ### the environment, the AWS region, the cluster name, the namespace, the resource type and the owner
      # workspaceTags: string
      ### Boolean which when set to true disables destroy runs on the workspace and vice-versa. It serves as a form of
      ### deletion protection. It defaults to false in prod and logs and true elsewhere
      # workspaceAllowDestroy: bool
      ### Used to map to the Terraform Cloud team(s) to give access to the workspace. Defaults to the global.owner value
      # workspaceOwner: string
      ### Use to map keys from AWS secret manager secrets to new key names. Map values should be in the form <new key>:<module secret key>
      # outputSecretMap: {}
      ### Automatically set to 3 in prod and 1 in dev and qa. Override this only if you know what you're doing.
      # instance_count: number
      ### Automatically set to 3 in prod and 1 in dev and qa. Override this only if you know what you're doing.
      # availability_zone_count: number
      ### Automatically set to true in prod and false in dev and qa. Override this only if you know what you're doing.
      # zone_awareness_enabled: bool
    # -- A map of instance names => variable key/value pairs to be sent to the terraform module. The values in
    # `defaultVars` will be applied to every instance if not explicitly defined here.
    instances: {}

postgresql:
  # -- Set to true to create a PostgreSQL RDS instance
  enabled: false
  # -- Set to true to create an AWS secret manager external secret with outputs
  outputSecret: true
  terraform:
    ### Set Terraform version for this module to overwrite global.TerraformVersion
    # terraformVersion:
    module:
      # -- Registry path of the Terraform module used to create the resource
      # (https://app.terraform.io/app/Mintel/registry/modules/private/Mintel/rds/aws)
      source: app.terraform.io/Mintel/rds/aws
      # -- Module version
      version: "1.0.2"
    # -- Vars to be applied to all instances defined below
    # @default -- See below
    defaultVars:
      # -- Database engine to use (should always be "postgres")
      engine: "postgres"
      # -- PostgreSQL version
      engine_version: "13"
      # -- PostgreSQL port
      port: 5432
      ### Set to override the generated workspace name for example if the generated name is above the char limit
      # workspaceNameOverride: string
      ### Comma separated list of tags to add to workspace. Set to override the defaults which are:
      ### the environment, the AWS region, the cluster name, the namespace, the resource type and the owner
      # workspaceTags: string
      ### Boolean which when set to true disables destroy runs on the workspace and vice-versa. It serves as a form of
      ### deletion protection. It defaults to false in prod and logs and true elsewhere
      # workspaceAllowDestroy: bool
      ### Used to map to the Terraform Cloud team(s) to give access to the workspace. Defaults to the global.owner value
      # workspaceOwner: string
      ### Use to map keys from AWS secret manager secrets to new key names. Map values should be in the form <new key>:<module secret key>
      # outputSecretMap: {}
      ### Automatically set to true if prod and false if non-prod. Override this only if you know what you're doing.
      # multi_az: bool
      ### Automatically set to 14 in prod, 7 in qa and 0 in dev. Override this only if you know what you're doing.
      # backup_retention_period: number
      ### Automatically set to true in prod and qa but false in dev. Override this only if you know what you're doing.
      # enable_deletion_protection
    # -- A map of instance names => variable key/value pairs to be sent to the terraform module. The values in
    # `defaultVars` will be applied to every instance if not explicitly defined here.
    instances: {}

auroraPostgresql:
  # -- Set to true to create a PostgreSQL Aurora RDS cluster
  enabled: false
  # -- Set to true to create an AWS secret manager external secret with outputs
  outputSecret: true
  terraform:
    ### Set Terraform version for this module to overwrite global.TerraformVersion
    # terraformVersion:
    module:
      # -- Registry path of the Terraform module used to create the resource
      # (https://app.terraform.io/app/Mintel/registry/modules/private/Mintel/rds-aurora/aws)
      source: app.terraform.io/Mintel/rds-aurora/aws
      # -- Module version
      version: "0.0.3"
    # -- Vars to be applied to all instances defined below
    # @default -- See below
    defaultVars:
      # -- Database engine to use (should always be "aurora-postgresql")
      engine: "aurora-postgresql"
      # -- Aurora PostgreSQL version
      engine_version: "14.3"
      # -- Aurora PostgreSQL port
      port: 5432
      # -- Instance type
      instance_class: "db.t3.medium"
      ### Set to override the generated workspace name for example if the generated name is above the char limit
      # workspaceNameOverride: string
      ### Comma separated list of tags to add to workspace. Set to override the defaults which are:
      ### the environment, the AWS region, the cluster name, the namespace, the resource type and the owner
      # workspaceTags: string
      ### Boolean which when set to true disables destroy runs on the workspace and vice-versa. It serves as a form of
      ### deletion protection. It defaults to false in prod and logs and true elsewhere
      # workspaceAllowDestroy: bool
      ### Used to map to the Terraform Cloud team(s) to give access to the workspace. Defaults to the global.owner value
      # workspaceOwner: string
      ### Use to map keys from AWS secret manager secrets to new key names. Map values should be in the form <new key>:<module secret key>
      # outputSecretMap: {}
      ### Automatically set to true if prod and false if non-prod. Override this only if you know what you're doing.
      # multi_az: bool
      ### Automatically set to 14 in prod, 7 in qa and 0 in dev. Override this only if you know what you're doing.
      # backup_retention_period: number
      ### Automatically set to true in prod and qa but false in dev. Override this only if you know what you're doing.
      # enable_deletion_protection: bool
    # -- A map of instance names => variable key/value pairs to be sent to the terraform module. The values in
    # `defaultVars` will be applied to every instance if not explicitly defined here.
    instances: {}

redis:
  # -- Set to true to create a Redis Elasticache resource
  enabled: false
  # -- Set to true to create an AWS secret manager external secret with outputs
  outputSecret: true
  terraform:
    ### Set Terraform version for this module to overwrite global.TerraformVersion
    # terraformVersion:
    module:
      # -- Registry path of the Terraform module used to create the resource
      # (https://app.terraform.io/app/Mintel/registry/modules/private/Mintel/redis/aws)
      source: app.terraform.io/Mintel/redis/aws
      # -- Module version
      version: "1.0.0"
    # -- Vars to be applied to all instances defined below
    defaultVars: {}
      ### Set to override the generated workspace name for example if the generated name is above the char limit
      # workspaceNameOverride: string
      ### Comma separated list of tags to add to workspace. Set to override the defaults which are:
      ### the environment, the AWS region, the cluster name, the namespace, the resource type and the owner
      # workspaceTags: string
      ### Boolean which when set to true disables destroy runs on the workspace and vice-versa. It serves as a form of
      ### deletion protection. It defaults to false in prod and logs and true elsewhere
      # workspaceAllowDestroy: bool
      ### Used to map to the Terraform Cloud team(s) to give access to the workspace. Defaults to the global.owner value
      # workspaceOwner: string
      ### Use to map keys from AWS secret manager secrets to new key names. Map values should be in the form <new key>:<module secret key>
      # outputSecretMap: {}
      ### Automatically set to 2 in prod and 1 in dev and qa. Override this only if you know what you're doing.
      # replication_group_size: number
      ### Automatically set to true in prod and false in dev and qa. Override this only if you know what you're doing.
      # enable_automatic_failover: bool
      ### Automatically set to true in prod and false in dev and qa. Override this only if you know what you're doing.
      # enable_multi_az: bool
    # -- A map of instance names => variable key/value pairs to be sent to the terraform module. The values in
    # `defaultVars` will be applied to every instance if not explicitly defined here.
    instances: {}

s3:
  # -- Set to true to create an S3 bucket
  enabled: false
  # -- Set to true to create an AWS secret manager external secret with outputs
  outputSecret: true
  terraform:
    ### Set Terraform version for this module to overwrite global.TerraformVersion
    # terraformVersion:
    module:
      # -- Registry path of the Terraform module used to create the resource
      # (https://app.terraform.io/app/Mintel/registry/modules/private/Mintel/private-s3-bucket/aws)
      source: app.terraform.io/Mintel/private-s3-bucket/aws
      # -- Module version
      version: "1.1.2"
    # -- Vars to be applied to all instances defined below
    defaultVars: {}
      ### Set to override the generated workspace name for example if the generated name is above the char limit
      # workspaceNameOverride: string
      ### Comma separated list of tags to add to workspace. Set to override the defaults which are:
      ### the environment, the AWS region, the cluster name, the namespace, the resource type and the owner
      # workspaceTags: string
      ### Boolean which when set to true disables destroy runs on the workspace and vice-versa. It serves as a form of
      ### deletion protection. It defaults to false in prod and logs and true elsewhere
      # workspaceAllowDestroy: bool
      ### Used to map to the Terraform Cloud team(s) to give access to the workspace. Defaults to the global.owner value
      # workspaceOwner: string
      ### Use to map keys from AWS secret manager secrets to new key names. Map values should be in the form <new key>:<module secret key>
      # outputSecretMap: {}
      ### Automatically set to true in prod and false in dev and qa. Override this only if you know what you're doing.
      # enable_versioning: bool
    # -- A map of instance names => variable key/value pairs to be sent to the terraform module. The values in
    # `defaultVars` will be applied to every instance if not explicitly defined here.
    instances: {}

activeMQ:
  # -- Set to true to create an activeMQ AWS amazonMQ instance
  enabled: false
  # -- Set to true to create an AWS secret manager external secret with outputs
  outputSecret: true
  terraform:
    ### Set Terraform version for this module to overwrite global.TerraformVersion
    # terraformVersion:
    module:
      # -- Registry path of the Terraform module used to create the resource
      # (https://app.terraform.io/app/Mintel/registry/modules/private/Mintel/amazonmq/aws)
      source: app.terraform.io/Mintel/amazonmq/aws
      # -- Module version
      version: "0.0.2"
    # -- Vars to be applied to all instances defined below
    defaultVars: {}
      ### Set to override the generated workspace name for example if the generated name is above the char limit
      # workspaceNameOverride: string
      ### Comma separated list of tags to add to workspace. Set to override the defaults which are:
      ### the environment, the AWS region, the cluster name, the namespace, the resource type and the owner
      # workspaceTags: string
      ### Boolean which when set to true disables destroy runs on the workspace and vice-versa. It serves as a form of
      ### deletion protection. It defaults to false in prod and logs and true elsewhere
      # workspaceAllowDestroy: bool
      ### Used to map to the Terraform Cloud team(s) to give access to the workspace. Defaults to the global.owner value
      # workspaceOwner: string
      ### Use to map keys from AWS secret manager secrets to new key names. Map values should be in the form <new key>:<module secret key>
      # outputSecretMap: {}
      ### Automatically set to true in prod and false in dev and qa. Override this only if you know what you're doing.
      # enable_versioning: bool
    # -- A map of instance names => variable key/value pairs to be sent to the terraform module. The values in
    # `defaultVars` will be applied to every instance if not explicitly defined here.
    instances: {}

stepFunctionEks:
  # -- Set to true to create an EKS runtime step function
  enabled: false
  # -- Set to true to create an AWS secret manager external secret with outputs
  outputSecret: false
  terraform:
    ### Set Terraform version for this module to overwrite global.TerraformVersion
    terraformVersion: 1.3.0-alpha20220608
    module:
      # -- Registry path of the Terraform module used to create the resource
      # (https://app.terraform.io/app/Mintel/registry/modules/private/Mintel/step-function-eks/aws)
      source: app.terraform.io/Mintel/step-functions-eks/aws
      # -- Module version
      version: "1.0.0"
    # -- Vars to be applied to all instances defined below
    defaultVars: {}
      ### Set to override the generated workspace name for example if the generated name is above the char limit
      # workspaceNameOverride: string
      ### Comma separated list of tags to add to workspace. Set to override the defaults which are:
      ### the environment, the AWS region, the cluster name, the namespace, the resource type and the owner
      # workspaceTags: string
      ### Boolean which when set to true disables destroy runs on the workspace and vice-versa. It serves as a form of
      ### deletion protection. It defaults to false in prod and logs and true elsewhere
      # workspaceAllowDestroy: bool
      ### Used to map to the Terraform Cloud team(s) to give access to the workspace. Defaults to the global.owner value
      # workspaceOwner: string
      ### Use to map keys from AWS secret manager secrets to new key names. Map values should be in the form <new key>:<module secret key>
      # outputSecretMap: {}
    # -- A map of instance names => variable key/value pairs to be sent to the terraform module. The values in
    # `defaultVars` will be applied to every instance if not explicitly defined here.
    instances: {}
