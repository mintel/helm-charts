# Default values for terraform-cloud.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# -- Global variables for us in all charts and sub charts
global:
  # -- Name of the application
  name: "example-app"
  # -- Team which "owns" the application
  owner: ""
  # -- Top level application each deployment is a part of
  partOf: ""
  # -- Additional labels to apply to all resources
  additionalLabels: {}
  # -- Kubernetes cluster domain
  clusterDomain: "127.0.0.1.nip.io"
  # -- Environment (local, dev, qa, prod)
  clusterEnv: "local"
  # -- Kubernetes cluster name
  clusterName: ""
  # -- Kubernetes cluster region
  clusterRegion: ""
  # -- Global variables relating to cloud provider
  cloudProvider:
    # -- AWS account ID
    accountId: ""
  # -- Global variable definint RUNTIME_ENVIRONMENT
  runtimeEnvironment: kubernetes
  # -- Global dictionary of TLS secrets
  ingressTLSSecrets: {}
  terraform:
    organization: Mintel
    secretsMountPath: /tmp/secrets
    terraformVersion: 1.0.7
    # set to true as part of tf cloud migrations. When true, it stops standard-application-stack from creating AWS related external secrets and passes that responsibility to the terraform-cloud chart
    externalSecrets: false

dynamodb:
  enabled: false
  terraform:
    module:
      # https://app.terraform.io/app/Mintel/registry/modules/private/Mintel/dynamodb/aws
      source: app.terraform.io/Mintel/dynamodb/aws
      version: "0.1.0-beta.1"
    defaultVars: {}
    # Vars to consider:
    # hash_key
    # range_key
    # attributes

sqs:
  enabled: false
  terraform:
    module:
      # https://app.terraform.io/app/Mintel/registry/modules/private/Mintel/sqs/aws
      source: app.terraform.io/Mintel/sqs/aws
      version: "0.1.0-beta.1"
    defaultVars: {}

sns:
  enabled: false
  terraform:
    module:
      # https://app.terraform.io/app/Mintel/registry/modules/private/Mintel/sns/aws
      source: app.terraform.io/Mintel/sns/aws
      version: "0.1.0-beta.1"
    defaultVars: {}

staticWebsite:
  enabled: false
  terraform:
    module:
      # https://app.terraform.io/app/Mintel/registry/modules/private/Mintel/public-static-website/aws
      source: app.terraform.io/Mintel/public-static-website/aws
      version: "0.1.0-beta.1"
    defaultVars: {}
      # Vars to consider:
      # cloudfront_index_document
      # cloudfront_error_responses
      # create_route53_entry

mariadb:
  enabled: false
  terraform:
    module:
      # https://app.terraform.io/app/Mintel/registry/modules/private/Mintel/rds/aws
      source: app.terraform.io/Mintel/rds/aws
      version: "0.1.0-beta.2"
    defaultVars:
      engine: "mariadb"
      engine_version: "10.5"
      port: 3306
    ## Workload resources are generated from the 'instances' map below. If postgresql.enabled is true and
    ## postgresql.terraform.instances is undefined then a default instance will be created with all the values from
    ## postgresql.terraform.defaultVars; "name" and "db_name" will be auto-generated as explained below. Any items added
    ## to an instance will be sent to Terraform Cloud as-is so consult the Terraform module for valid inputs.
    # instances:
    #   "my-instance":
    #     name: if not provided, name will match global.name
    #     db_name: if not provided, db_name will match a snakecase version of global.name (dashes (-) will be converted
    #              to underscores)
    #     any_other_var: will be sent to terraform

memcached:
  enabled: false
  terraform:
    module:
      # https://app.terraform.io/app/Mintel/registry/modules/private/Mintel/memcached/aws
      source: app.terraform.io/Mintel/memcached/aws
      version: "0.1.0-beta.2"
    defaultVars:
      instance_type: cache.t4g.micro
      num_cache_nodes: 1

opensearch:
  enabled: false
  terraform:
    module:
      # https://app.terraform.io/app/Mintel/registry/modules/private/Mintel/opensearch/aws
      source: app.terraform.io/Mintel/opensearch/aws
      version: "0.1.0-beta.2"
    defaultVars: {}

postgresql:
  enabled: false
  terraform:
    module:
      # https://app.terraform.io/app/Mintel/registry/modules/private/Mintel/rds/aws
      source: app.terraform.io/Mintel/rds/aws
      version: "0.1.0-beta.2"
    defaultVars:
      engine: "postgres"
      engine_version: "13"
      port: 5432
    ## Workload resources are generated from the 'instances' map below. If postgresql.enabled is true and
    ## postgresql.terraform.instances is undefined then a default instance will be created with all the values from
    ## postgresql.terraform.defaultVars; "name" and "db_name" will be auto-generated as explained below. Any items added
    ## to an instance will be sent to Terraform Cloud as-is so consult the Terraform module for valid inputs.
    # instances:
    #   "my-instance":
    #     name: if not provided, name will match global.name
    #     db_name: if not provided, db_name will match a snakecase version of global.name (dashes (-) will be converted
    #              to underscores)
    #     any_other_var: will be sent to terraform

redis:
  enabled: false
  terraform:
    module:
      # https://app.terraform.io/app/Mintel/registry/modules/private/Mintel/redis/aws
      source: app.terraform.io/Mintel/redis/aws
      version: "0.1.0-beta.2"
    defaultVars: {}

s3:
  enabled: false
  terraform:
    module:
      # https://app.terraform.io/app/Mintel/registry/modules/private/Mintel/private-s3-bucket/aws
      source: app.terraform.io/Mintel/private-s3-bucket/aws
      version: "0.1.0-beta.1"
    defaultVars: {}
