# List the supported resource types here. These should map directly to the top-level fields of the same name in the
# values.yaml file.
{{- $global := $.Values.global }}
{{- $data := dict "Values" $.Values "component" .name }}
# check if any of the irsa dependent resources are enabled
{{- if (or $.Values.irsa.enabled (eq "true" (include "mintel_common.terraform_cloud.irsaRequired" . | trim))) }}
  {{- $irsa := $.Values.irsa }}
  {{- $moduleSource := $irsa.terraform.module.source }}
  {{- $moduleVersion := $irsa.terraform.module.version }}
  {{- $tfVersion := $irsa.terraform.terraformVersion }}
  {{- $irsaConfig := $irsa.terraform.vars }}
  {{- $notifications := $irsa.terraform.notifications }}
  {{- $defaultTags := dict "Owner" $global.owner "Project" $global.partOf "Application" ($global.application | default $global.name) "Component" ($global.component | default $global.name) }}
  {{- if not (hasKey $irsaConfig "name") }}
    {{- $_ := set $irsaConfig "name" (.Values.irsa.nameOverride | default $global.name) }}
  {{- end }}
  {{- if not (hasKey $irsaConfig "aws_account_name") }}
    {{- $_ := set $irsaConfig "aws_account_name" $global.clusterEnv }}
  {{- end }}
  {{- if not (hasKey $irsaConfig "aws_region") }}
    {{- $_ := set $irsaConfig "aws_region" $global.clusterRegion }}
  {{- end }}
  {{- if not (hasKey $irsaConfig "eks_cluster_name") }}
    {{- $_ := set $irsaConfig "eks_cluster_name" $global.clusterName }}
  {{- end }}
  {{- if not (hasKey $irsaConfig "tags") }}
    {{- $_ := set $irsaConfig "tags" (dict "key" "tags" "value" ( printf "{\n%s}" (include "mintel_common.terraform_cloud.dict_to_hcl" $defaultTags )) "hcl" true) }}
  {{ end }}
  {{- if not (hasKey $irsaConfig "tfcloud_agent") }}
    {{- $_ := set $irsaConfig "tfcloud_agent" "true" }}
  {{- end }}
  {{- if (not (hasKey $irsaConfig "k8s_service_account_name")) }}
    {{- $_ := set $irsaConfig "k8s_service_account_name" $global.name }}
  {{- end }}
  {{- if (not (hasKey $irsaConfig "k8s_extra_service_accounts")) }}
    {{- $serviceAccounts := list }}
    {{- if $.Values.jobs }}
      {{- range $.Values.jobs }}
        {{- $serviceAccounts = append $serviceAccounts (printf "%s-%s" $global.name .name) }}
      {{- end }}
    {{- end }}
    {{- if gt (len $serviceAccounts) 0 }}
      {{- $_ := set $irsaConfig "k8s_extra_service_accounts" ( dict "key" "k8s_extra_service_accounts" "value" (printf "[\"%s\"]" (join "\",\"" $serviceAccounts)) "hcl" "true" ) }}
    {{- end }}
  {{- end }}
  {{- if (not (hasKey $irsaConfig "k8s_namespace")) }}
    {{- $_ := set $irsaConfig "k8s_namespace" $.Release.Namespace }}
  {{- end }}
  # You cannot find multi-region access points by tag using "aws_resourcegroupstaggingapi_resources" in the app-iam
  # module (this is how we do it for other resources) so we need to pass the access point names into the app-iam module
  # as a separate var so it can find them using the "aws_s3control_multi_region_access_point" data resource.
  {{- if $.Values.s3MultiRegionAccessPoint.enabled }}
    {{- $instanceList := list }}
    {{- range $instanceName, $instanceConfig := $.Values.s3MultiRegionAccessPoint.terraform.instances | default ( dict "default" dict ) }}
      {{- $instanceDict := dict "Global" $global "InstanceCfg" $instanceConfig "InstanceName" $instanceName "ResourceType" "s3MultiRegionAccessPoint" }}
      {{- $instanceList = append $instanceList (quote (include "mintel_common.terraform_cloud.instanceConfigName" $instanceDict | trim))}}
    {{- end }}
    {{- $_ := set $irsaConfig "lookup_multi_region_access_points" (dict "key" "lookup_multi_region_access_points" "value" $instanceList "hcl" true) }}
  {{- end }}
  # Create the CRD
  {{- include "mintel_common.terraform_cloud.workspace_v2" (list $ . $irsaConfig "irsa" $moduleSource $moduleVersion $tfVersion $irsa $notifications) }}
---
  {{- include "mintel_common.terraform_cloud.module_v2" (list $ . $irsaConfig "irsa" $moduleSource $moduleVersion $tfVersion $irsa $notifications) }}
{{- end }}
