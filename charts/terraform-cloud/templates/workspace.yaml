# List the supported resource types here. These should map directly to the top-level fields of the same name in the
# values.yaml file.
{{- range include "mintel_common.terraformCloudResources" $ | split "," }}
  {{- $global := $.Values.global }}
  # define default tags
  {{- $defaultTags := dict "Owner" $global.owner "Project" $global.partOf "Application" $global.name }}
  # Get the config for the current resource in the loop (e.g. resourceType = "memcached", resourceConfig = everything
  # inside the memcached dict in values.yaml)
  {{- $resourceType := . }}
  {{- $resourceConfig := (get $.Values .) }}
  # Create the Workspace CRD only if the enabled field is set to true
  {{- if $resourceConfig.enabled }}
    # Loop through the instances configured in memcached.terraform.instances (create an empty dict with a "default"
    # instance if it hasn't been specified)
    {{- range $instanceName, $instanceConfig := $resourceConfig.terraform.instances | default ( dict "default" dict ) }}
      {{- $moduleSource := $resourceConfig.terraform.module.source }}
      {{- $moduleVersion := $resourceConfig.terraform.module.version }}
      {{- $tfVersion := $resourceConfig.terraform.terraformVersion }}
      # Set instance.name via helper
      {{- $instanceDict := dict "Global" $global "InstanceCfg" $instanceConfig "InstanceName" $instanceName "ResourceType" $resourceType }}
      {{- $_ := set $instanceConfig "name" (include "mintel_common.terraform_cloud.instanceConfigName" $instanceDict | trim)}}
      # Set instance.db_name for postgresql and mariadb if not provided
      {{- if ( and ( has $resourceType (list "postgresql" "mariadb" "auroraMySql" "auroraPostgresql") ) ( not ( hasKey $instanceConfig "db_name" ) ) ) }}
        {{- $_ := set $instanceConfig "db_name" ( $instanceConfig.name | snakecase ) }}
      {{- end }}
      # Set instance.eks_namespace for stepFunctionEks if not provided
      {{- if ( and ( has $resourceType (list "stepFunctionEks" "sshKeyPairSecret") ) ( not ( hasKey $instanceConfig "eks_namespace" ) ) ) }}
        {{- $_ := set $instanceConfig "eks_namespace" $.Release.Namespace }}
      {{- end }}
      {{- if not (hasKey $instanceConfig "aws_account_name") }}
        {{- $_ := set $instanceConfig "aws_account_name" $global.clusterEnv }}
      {{ end }}
      {{- if not (hasKey $instanceConfig "aws_region") }}
        {{- $_ := set $instanceConfig "aws_region" $global.clusterRegion }}
      {{ end }}
      {{- if not (hasKey $instanceConfig "eks_cluster_name") }}
        {{- $_ := set $instanceConfig "eks_cluster_name" $global.clusterName }}
      {{ end }}
      # Set instance tags
      {{- if not (hasKey $instanceConfig "tags") }}
       {{- $_ := set $instanceConfig "tags" (dict "key" "tags" "value" ( printf "{\n%s}" (include "mintel_common.terraform_cloud.dict_to_hcl" $defaultTags )) "hcl" true) }}
      {{- else }}      
        # {{- $customTags := dict }}
        # {{- range $key, $value := $instanceConfig.tags }}
        #   {{- $_ := set $customTags $key $value }}
        # {{ end }}
        {{- $mergedTags := merge $defaultTags $instanceConfig.tags }}
        {{- $_ := set $instanceConfig "tags" (dict "key" "tags" "value" ( printf "{\n%s}" (include "mintel_common.terraform_cloud.dict_to_hcl" $mergedTags )) "hcl" true) }}
      {{ end }}
      {{- if not (hasKey $instanceConfig "tfcloud_agent") }}
        {{- $_ := set $instanceConfig "tfcloud_agent" "true" }}
      {{ end }}
      # Set the secret manager related parameters if required
      {{- if $resourceConfig.outputSecret }}
      {{- if not (hasKey $instanceConfig "output_secret_name") }}
        {{- $_ := set $instanceConfig "output_secret_name" ( printf "%s/%s/%s" $.Release.Namespace $instanceConfig.name $resourceType ) }}
      {{ end }}
      {{- if not (hasKey $instanceConfig "secret_tags") }}
        {{- $_ := set $instanceConfig "secret_tags" (dict "key" "secret_tags" "value" (printf "{access-project = \"%s-ops\"}" $.Release.Namespace ) "hcl" true) }}
      {{- end }}
      {{- end }}
      # Add default values to each instance if keys not set already
      {{- range $defaultKey, $defaultVal := $resourceConfig.terraform.defaultVars }}
        {{- if not ( hasKey $instanceConfig $defaultKey ) }}
          {{- $_ := set $instanceConfig $defaultKey $defaultVal }}
        {{- end }}
      {{- end }}
      # Apply defaults based on environment
      {{- $instanceConfig = mergeOverwrite (include "mintel_common.terraform_cloud.defaultVarValues" $instanceDict | fromJson ) $instanceConfig }}
      # Create the CRD
---
      {{- include "mintel_common.terraform_cloud.workspace" (list $ . $instanceConfig $resourceType $moduleSource $moduleVersion $tfVersion $resourceConfig) }}
    {{- end }}
  {{- end }}
{{- end }}
